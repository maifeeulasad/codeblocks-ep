<html xmlns:o="urn:schemas-microsoft-com:office:office"
xmlns:w="urn:schemas-microsoft-com:office:word"
xmlns="http://www.w3.org/TR/REC-html40">

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=ProgId content=Word.Document>
<meta name=Generator content="Microsoft Word 9">
<meta name=Originator content="Microsoft Word 9">
<link rel=File-List href="./AMD_files/filelist.xml">
<title>Support for AMD 3DNOW instruction set</title>
<!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>jacob navia</o:Author>
  <o:LastAuthor>jacob navia</o:LastAuthor>
  <o:Revision>9</o:Revision>
  <o:TotalTime>75</o:TotalTime>
  <o:Created>2001-05-26T06:09:00Z</o:Created>
  <o:LastSaved>2001-11-21T10:31:00Z</o:LastSaved>
  <o:Pages>5</o:Pages>
  <o:Words>2011</o:Words>
  <o:Characters>11468</o:Characters>
  <o:Company>logiciels/informatique</o:Company>
  <o:Lines>95</o:Lines>
  <o:Paragraphs>22</o:Paragraphs>
  <o:CharactersWithSpaces>14083</o:CharactersWithSpaces>
  <o:Version>9.4402</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DrawingGridHorizontalSpacing>3.9 pt</w:DrawingGridHorizontalSpacing>
  <w:DrawingGridVerticalSpacing>5.3 pt</w:DrawingGridVerticalSpacing>
  <w:DisplayHorizontalDrawingGridEvery>0</w:DisplayHorizontalDrawingGridEvery>
  <w:DisplayVerticalDrawingGridEvery>2</w:DisplayVerticalDrawingGridEvery>
 </w:WordDocument>
</xml><![endif]-->
<style>
<!--
 /* Font Definitions */
@font-face
	{font-family:TimesEuropa-Roman;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:roman;
	mso-font-format:other;
	mso-font-pitch:auto;
	mso-font-signature:3 0 0 0 1 0;}
@font-face
	{font-family:LetterGothic;
	panose-1:0 0 0 0 0 0 0 0 0 0;
	mso-font-charset:0;
	mso-generic-font-family:modern;
	mso-font-format:other;
	mso-font-pitch:auto;
	mso-font-signature:3 0 0 0 1 0;}
 /* Style Definitions */
p.MsoNormal, li.MsoNormal, div.MsoNormal
	{mso-style-parent:"";
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
h1
	{mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:1;
	font-size:12.0pt;
	font-family:Arial;
	mso-bidi-font-family:"Times New Roman";
	mso-font-kerning:0pt;}
h2
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	text-align:justify;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:2;
	font-size:14.0pt;
	font-family:Arial;
	font-style:italic;}
h3
	{mso-style-next:Normal;
	margin-top:12.0pt;
	margin-right:0in;
	margin-bottom:3.0pt;
	margin-left:0in;
	text-align:justify;
	mso-pagination:widow-orphan;
	page-break-after:avoid;
	mso-outline-level:3;
	font-size:13.0pt;
	font-family:Arial;}
p.MsoToc1, li.MsoToc1, div.MsoToc1
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.MsoToc2, li.MsoToc2, div.MsoToc2
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:12.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.MsoToc3, li.MsoToc3, div.MsoToc3
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:24.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.MsoToc4, li.MsoToc4, div.MsoToc4
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.MsoToc5, li.MsoToc5, div.MsoToc5
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:48.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.MsoToc6, li.MsoToc6, div.MsoToc6
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:60.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.MsoToc7, li.MsoToc7, div.MsoToc7
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:1.0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.MsoToc8, li.MsoToc8, div.MsoToc8
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:84.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.MsoToc9, li.MsoToc9, div.MsoToc9
	{mso-style-update:auto;
	mso-style-next:Normal;
	margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:96.0pt;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:Arial;
	mso-fareast-font-family:"Times New Roman";
	mso-bidi-font-family:"Times New Roman";}
p.MsoBodyText, li.MsoBodyText, div.MsoBodyText
	{margin:0in;
	margin-bottom:.0001pt;
	text-align:justify;
	mso-pagination:widow-orphan;
	font-size:12.0pt;
	font-family:"Courier New";
	mso-fareast-font-family:"Times New Roman";
	font-weight:bold;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;
	text-underline:single;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;
	text-underline:single;}
@page Section1
	{size:595.35pt 842.0pt;
	margin:1.0in 89.85pt 1.0in 89.85pt;
	mso-header-margin:.5in;
	mso-footer-margin:.5in;
	mso-paper-source:0;}
div.Section1
	{page:Section1;}
-->
</style>
</head>

<body lang=EN-US link=blue vlink=purple style='tab-interval:.5in'>

<div class=Section1>

<h2><a name="_Toc515503283">Support for AMD 3DNOW instruction set</a></h2>

<p class=MsoNormal>To use this set of instructions you should always</p>

<p class=MsoNormal><span style='font-family:"Courier New"'>#include
&lt;mmx.h&gt;<o:p></o:p></span></p>

<p class=MsoNormal>to get this instrinsics prototypes.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>The following primitives are provided:</p>

<p class=MsoToc1 style='tab-stops:right dotted 415.15pt'><!--[if supportFields]><span
style='mso-element:field-begin'></span><span style="mso-spacerun:
yes"> </span>TOC \o &quot;1-3&quot; \h \z <span style='mso-element:field-separator'></span><![endif]--><span
class=MsoHyperlink><a href="#_Toc515503283">Support for AMD 3DNOW instruction
set<span style='color:windowtext;display:none;mso-hide:screen;text-decoration:
none;text-underline:none'><span style='mso-tab-count:1 dotted'> </span><span
style='mso-field-code:"PAGEREF _Toc515503283 \\h"'>1<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F0054006F0063003500310035003500300033003200380033000000</w:data>
</xml><![endif]--></span></span></a></span><span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoToc3 style='tab-stops:right dotted 415.15pt'><span
class=MsoHyperlink><a href="#_Toc515503284">PAVGSUB<span style='color:windowtext;
display:none;mso-hide:screen;text-decoration:none;text-underline:none'><span
style='mso-tab-count:1 dotted'>.. </span><span style='mso-field-code:"PAGEREF _Toc515503284 \\h"'>1<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F0054006F0063003500310035003500300033003200380034000000</w:data>
</xml><![endif]--></span></span></a></span><span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoToc3 style='tab-stops:right dotted 415.15pt'><span
class=MsoHyperlink><a href="#_Toc515503285">PF2ID<span style='color:windowtext;
display:none;mso-hide:screen;text-decoration:none;text-underline:none'><span
style='mso-tab-count:1 dotted'>.. </span><span style='mso-field-code:"PAGEREF _Toc515503285 \\h"'>1<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F0054006F0063003500310035003500300033003200380035000000</w:data>
</xml><![endif]--></span></span></a></span><span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoToc3 style='tab-stops:right dotted 415.15pt'><span
class=MsoHyperlink><a href="#_Toc515503286">PFACC<span style='color:windowtext;
display:none;mso-hide:screen;text-decoration:none;text-underline:none'><span
style='mso-tab-count:1 dotted'>.. </span><span style='mso-field-code:"PAGEREF _Toc515503286 \\h"'>2<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F0054006F0063003500310035003500300033003200380036000000</w:data>
</xml><![endif]--></span></span></a></span><span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoToc3 style='tab-stops:right dotted 415.15pt'><span
class=MsoHyperlink><a href="#_Toc515503287">PFADD<span style='color:windowtext;
display:none;mso-hide:screen;text-decoration:none;text-underline:none'><span
style='mso-tab-count:1 dotted'>.. </span><span style='mso-field-code:"PAGEREF _Toc515503287 \\h"'>2<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F0054006F0063003500310035003500300033003200380037000000</w:data>
</xml><![endif]--></span></span></a></span><span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoToc3 style='tab-stops:right dotted 415.15pt'><span
class=MsoHyperlink><a href="#_Toc515503288">PFCMPEQ<span style='color:windowtext;
display:none;mso-hide:screen;text-decoration:none;text-underline:none'><span
style='mso-tab-count:1 dotted'>.. </span><span style='mso-field-code:"PAGEREF _Toc515503288 \\h"'>2<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F0054006F0063003500310035003500300033003200380038000000</w:data>
</xml><![endif]--></span></span></a></span><span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoToc3 style='tab-stops:right dotted 415.15pt'><span
class=MsoHyperlink><a href="#_Toc515503289">PFCMPGE<span style='color:windowtext;
display:none;mso-hide:screen;text-decoration:none;text-underline:none'><span
style='mso-tab-count:1 dotted'>.. </span><span style='mso-field-code:"PAGEREF _Toc515503289 \\h"'>2<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F0054006F0063003500310035003500300033003200380039000000</w:data>
</xml><![endif]--></span></span></a></span><span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoToc3 style='tab-stops:right dotted 415.15pt'><span
class=MsoHyperlink><a href="#_Toc515503290">PFCMPGT<span style='color:windowtext;
display:none;mso-hide:screen;text-decoration:none;text-underline:none'><span
style='mso-tab-count:1 dotted'>. </span><span style='mso-field-code:"PAGEREF _Toc515503290 \\h"'>3<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F0054006F0063003500310035003500300033003200390030000000</w:data>
</xml><![endif]--></span></span></a></span><span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoToc3 style='tab-stops:right dotted 415.15pt'><span
class=MsoHyperlink><a href="#_Toc515503291">PFMAX<span style='color:windowtext;
display:none;mso-hide:screen;text-decoration:none;text-underline:none'><span
style='mso-tab-count:1 dotted'>.. </span><span style='mso-field-code:"PAGEREF _Toc515503291 \\h"'>3<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F0054006F0063003500310035003500300033003200390031000000</w:data>
</xml><![endif]--></span></span></a></span><span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoToc3 style='tab-stops:right dotted 415.15pt'><span
class=MsoHyperlink><a href="#_Toc515503292">PFMIN<span style='color:windowtext;
display:none;mso-hide:screen;text-decoration:none;text-underline:none'><span
style='mso-tab-count:1 dotted'>.. </span><span style='mso-field-code:"PAGEREF _Toc515503292 \\h"'>3<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F0054006F0063003500310035003500300033003200390032000000</w:data>
</xml><![endif]--></span></span></a></span><span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoToc3 style='tab-stops:right dotted 415.15pt'><span
class=MsoHyperlink><a href="#_Toc515503293">PFMUL<span style='color:windowtext;
display:none;mso-hide:screen;text-decoration:none;text-underline:none'><span
style='mso-tab-count:1 dotted'>. </span><span style='mso-field-code:"PAGEREF _Toc515503293 \\h"'>3<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F0054006F0063003500310035003500300033003200390033000000</w:data>
</xml><![endif]--></span></span></a></span><span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoToc3 style='tab-stops:right dotted 415.15pt'><span
class=MsoHyperlink><a href="#_Toc515503294">PFRCP<span style='color:windowtext;
display:none;mso-hide:screen;text-decoration:none;text-underline:none'><span
style='mso-tab-count:1 dotted'>.. </span><span style='mso-field-code:"PAGEREF _Toc515503294 \\h"'>4<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F0054006F0063003500310035003500300033003200390034000000</w:data>
</xml><![endif]--></span></span></a></span><span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoToc3 style='tab-stops:right dotted 415.15pt'><span
class=MsoHyperlink><a href="#_Toc515503295">PFRCPIT1<span style='color:windowtext;
display:none;mso-hide:screen;text-decoration:none;text-underline:none'><span
style='mso-tab-count:1 dotted'>. </span><span style='mso-field-code:"PAGEREF _Toc515503295 \\h"'>4<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F0054006F0063003500310035003500300033003200390035000000</w:data>
</xml><![endif]--></span></span></a></span><span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoToc3 style='tab-stops:right dotted 415.15pt'><span
class=MsoHyperlink><a href="#_Toc515503296">PFRCPIT2<span style='color:windowtext;
display:none;mso-hide:screen;text-decoration:none;text-underline:none'><span
style='mso-tab-count:1 dotted'>. </span><span style='mso-field-code:"PAGEREF _Toc515503296 \\h"'>4<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F0054006F0063003500310035003500300033003200390036000000</w:data>
</xml><![endif]--></span></span></a></span><span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoToc3 style='tab-stops:right dotted 415.15pt'><span
class=MsoHyperlink><a href="#_Toc515503297">PFRSQRT<span style='color:windowtext;
display:none;mso-hide:screen;text-decoration:none;text-underline:none'><span
style='mso-tab-count:1 dotted'>. </span><span style='mso-field-code:"PAGEREF _Toc515503297 \\h"'>4<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F0054006F0063003500310035003500300033003200390037000000</w:data>
</xml><![endif]--></span></span></a></span><span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoToc3 style='tab-stops:right dotted 415.15pt'><span
class=MsoHyperlink><a href="#_Toc515503298">PFSUB<span style='color:windowtext;
display:none;mso-hide:screen;text-decoration:none;text-underline:none'><span
style='mso-tab-count:1 dotted'>.. </span><span style='mso-field-code:"PAGEREF _Toc515503298 \\h"'>4<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F0054006F0063003500310035003500300033003200390038000000</w:data>
</xml><![endif]--></span></span></a></span><span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoToc3 style='tab-stops:right dotted 415.15pt'><span
class=MsoHyperlink><a href="#_Toc515503299">PFSUBR<span style='color:windowtext;
display:none;mso-hide:screen;text-decoration:none;text-underline:none'><span
style='mso-tab-count:1 dotted'>.. </span><span style='mso-field-code:"PAGEREF _Toc515503299 \\h"'>5<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F0054006F0063003500310035003500300033003200390039000000</w:data>
</xml><![endif]--></span></span></a></span><span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoToc3 style='tab-stops:right dotted 415.15pt'><span
class=MsoHyperlink><a href="#_Toc515503300">PFI2FD<span style='color:windowtext;
display:none;mso-hide:screen;text-decoration:none;text-underline:none'><span
style='mso-tab-count:1 dotted'>.. </span><span style='mso-field-code:"PAGEREF _Toc515503300 \\h"'>5<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F0054006F0063003500310035003500300033003300300030000000</w:data>
</xml><![endif]--></span></span></a></span><span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoToc3 style='tab-stops:right dotted 415.15pt'><span
class=MsoHyperlink><a href="#_Toc515503301">PFMULHRW<span style='color:windowtext;
display:none;mso-hide:screen;text-decoration:none;text-underline:none'><span
style='mso-tab-count:1 dotted'>... </span><span style='mso-field-code:"PAGEREF _Toc515503301 \\h"'>5<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F0054006F0063003500310035003500300033003300300031000000</w:data>
</xml><![endif]--></span></span></a></span><span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoToc2 style='tab-stops:right dotted 415.15pt'><span
class=MsoHyperlink><a href="#_Toc515503302">Example of a 3DNOW program in C<span
style='color:windowtext;display:none;mso-hide:screen;text-decoration:none;
text-underline:none'><span style='mso-tab-count:1 dotted'>.. </span><span
style='mso-field-code:"PAGEREF _Toc515503302 \\h"'>5<!--[if gte mso 9]><xml>
 <w:data>08D0C9EA79F9BACE118C8200AA004BA90B02000000080000000E0000005F0054006F0063003500310035003500300033003300300032000000</w:data>
</xml><![endif]--></span></span></a></span><span style='font-family:"Times New Roman"'><o:p></o:p></span></p>

<p class=MsoNormal><!--[if supportFields]><span style='mso-element:field-end'></span><![endif]--><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h3><a name="_Toc515503284">PAVGSUB</a></h3>

<p class=MsoBodyText><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoBodyText>void _stdcall _pavgusb(_mmxdata *array1,_mmxdata
*array2,int n);</p>

<p class=MsoNormal><b><span style='font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></b></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='font-family:TimesEuropa-Roman'>The
PAVGUSB instruction produces the rounded averages of the eight unsigned 8-bit
integer values in the source operand (an MMX register or a 64-bit memory
location) and the eight corresponding unsigned 8-bit integer values in the
destination operand (an MMX register). It does so by adding the source and
destination byte values and then adding a 001h to the 9-bit intermediate value.
The intermediate value is then divided by 2 (shifted right one place) and the
eight unsigned 8-bit results are stored in the MMX register specified as the
destination operand. The PAVGUSB instruction can be used for pixel averaging in
MPEG-2 motion compensation and video scaling operations.<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='font-family:"Times New Roman"'>Numerical
Range for the PF2ID Instruction<o:p></o:p></span></p>

<h3><a name="_Toc515503285">PF2ID</a></h3>

<p class=MsoNormal><span style='font-family:"Courier New"'>void _stdcall
_pf2id(_mmxdata *array1,_mmxdata *array2,int n);<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='font-family:TimesEuropa-Roman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal style='mso-layout-grid-align:none;text-autospace:none'><span
style='font-family:TimesEuropa-Roman'>PF2ID is a vector instruction that
converts a vector register containing single-precision, floating-point operands
to 32-bit signed integers using truncation. The table below shows the numerical
range of the PF2ID instruction. The PF2ID instruction performs the following
operations:<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='font-family:TimesEuropa-Roman'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='mso-bidi-font-size:10.0pt;font-family:
"Courier New"'>IF (mmreg2/mem64[31:0] &gt;= 2)<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bidi-font-size:
10.0pt;font-family:"Courier New"'>THEN mmreg1[31:0] = 7FFF_FFFFh<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='mso-bidi-font-size:10.0pt;font-family:
"Courier New"'>ELSEIF (mmreg2/mem64[31:0] &lt;= 2)<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bidi-font-size:
10.0pt;font-family:"Courier New"'>THEN mmreg1[31:0] = 8000_0000h<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='mso-bidi-font-size:10.0pt;font-family:
"Courier New"'>ELSE mmreg1[31:0] = int(mmreg2/mem64[31:0])<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='mso-bidi-font-size:10.0pt;font-family:
"Courier New"'>IF (mmreg2/mem64[63:32] &gt;= 2)<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bidi-font-size:
10.0pt;font-family:"Courier New"'>THEN mmreg1[63:32] = 7FFF_FFFFh<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
none;text-autospace:none'><span style='mso-bidi-font-size:10.0pt;font-family:
"Courier New"'>ELSEIF (mmreg2/mem64[63:32] &lt;= 2)<o:p></o:p></span></p>

<p class=MsoNormal align=left style='text-align:left;text-indent:.5in;
mso-layout-grid-align:none;text-autospace:none'><span style='mso-bidi-font-size:
10.0pt;font-family:"Courier New"'>THEN mmreg1[63:32] = 8000_0000h<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-size:10.0pt;font-family:"Courier New"'>ELSE
mmreg1[63:32] = int(mmreg2/mem64[63:32])<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:LetterGothic'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-size:10.0pt;font-family:LetterGothic'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<table border=1 cellspacing=0 cellpadding=0 style='border-collapse:collapse;
 border:none;mso-border-alt:solid windowtext .5pt;mso-padding-alt:0in 5.4pt 0in 5.4pt'>
 <tr>
  <td width=284 valign=top style='width:213.2pt;border:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=FR style='font-size:11.0pt;font-family:
  "Courier New";mso-ansi-language:FR'>Source 2<o:p></o:p></span></p>
  </td>
  <td width=284 valign=top style='width:213.25pt;border:solid windowtext .5pt;
  border-left:none;mso-border-left-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=FR style='font-size:11.0pt;font-family:
  "Courier New";mso-ansi-language:FR'>Source 1 and destination<o:p></o:p></span></p>
  </td>
 </tr>
 <tr>
  <td width=284 valign=top style='width:213.2pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=FR style='font-size:11.0pt;font-family:
  "Courier New";mso-ansi-language:FR'>0<o:p></o:p></span></p>
  </td>
  <td width=284 valign=top style='width:213.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=FR style='font-size:11.0pt;font-family:
  "Courier New";mso-ansi-language:FR'>0<o:p></o:p></span></p>
  </td>
 </tr>
 <tr>
  <td width=284 valign=top style='width:213.2pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span lang=FR style='font-size:11.0pt;font-family:
  "Courier New";mso-ansi-language:FR'>Normal, abs(Source 1) &lt;1<o:p></o:p></span></p>
  </td>
  <td width=284 valign=top style='width:213.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span style='font-size:11.0pt;font-family:"Courier New"'>0<o:p></o:p></span></p>
  </td>
 </tr>
 <tr>
  <td width=284 valign=top style='width:213.2pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span style='font-size:11.0pt;font-family:"Courier New"'>Normal,
  2147483648 &lt; Source 1 &lt;= 1<o:p></o:p></span></p>
  </td>
  <td width=284 valign=top style='width:213.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span style='font-size:11.0pt;font-family:"Courier New"'>round
  to zero (Source 1)<o:p></o:p></span></p>
  </td>
 </tr>
 <tr>
  <td width=284 valign=top style='width:213.2pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span style='font-size:11.0pt;font-family:"Courier New"'>Normal,
  1 &lt;= Source 1&lt; 2147483648<o:p></o:p></span></p>
  </td>
  <td width=284 valign=top style='width:213.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span style='font-size:11.0pt;font-family:"Courier New"'>round
  to zero (Source 1)<o:p></o:p></span></p>
  </td>
 </tr>
 <tr>
  <td width=284 valign=top style='width:213.2pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span style='font-size:11.0pt;font-family:"Courier New"'>Normal,
  Source 1 &gt;= 2147483648<o:p></o:p></span></p>
  </td>
  <td width=284 valign=top style='width:213.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span style='font-size:11.0pt;font-family:"Courier New"'>7FFF_FFFFh<o:p></o:p></span></p>
  </td>
 </tr>
 <tr>
  <td width=284 valign=top style='width:213.2pt;border:solid windowtext .5pt;
  border-top:none;mso-border-top-alt:solid windowtext .5pt;padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span style='font-size:11.0pt;font-family:"Courier New"'>Normal,
  Source 1 &lt;= 2147483648<o:p></o:p></span></p>
  </td>
  <td width=284 valign=top style='width:213.25pt;border-top:none;border-left:
  none;border-bottom:solid windowtext .5pt;border-right:solid windowtext .5pt;
  mso-border-top-alt:solid windowtext .5pt;mso-border-left-alt:solid windowtext .5pt;
  padding:0in 5.4pt 0in 5.4pt'>
  <p class=MsoNormal align=left style='text-align:left;mso-layout-grid-align:
  none;text-autospace:none'><span style='font-size:11.0pt;font-family:"Courier New"'>8000_0000h<o:p></o:p></span></p>
  </td>
 </tr>
</table>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h3><a name="_Toc515503286">PFACC</a></h3>

<p class=MsoBodyText>void _stdcall _pfacc(_mmxdata *array1,_mmxdata *array2,int
n);</p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>PFACC is a
vector instruction that accumulates the two words of the destination operand
and the source operand and stores the results in the low and high words of
destination operand respectively. Both operands are single-precision,
floating-point operands with 24-bit significands. <o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>The PFACC
instruction performs the following operations:<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>mmreg1[31:0] =
mmreg1[31:0] + mmreg1[63:32]<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>mmreg1[63:32] =
mmreg2/mem64[31:0] + mmreg2/mem64[63:32]<o:p></o:p></span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h3><a name="_Toc515503287">PFADD</a></h3>

<p class=MsoBodyText>void _stdcall _pfadd(_mmxdata *array1,_mmxdata *array2,int
n);</p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>PFADD is a
vector instruction that performs addition of the destination operand and the
source operand. Both operands are single-precision, floating-point operands
with 24-bit significands. <o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>The PFADD
instruction performs the following operations:<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>mmreg1[31:0] =
mmreg1[31:0] + mmreg2/mem64[31:0]<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>mmreg1[63:32] =
mmreg1[63:32] + mmreg2/mem64[63:32]<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h3><a name="_Toc515503288">PFCMPEQ</a></h3>

<p class=MsoBodyText>void _stdcall _pfcmpeq(_mmxdata *array1,_mmxdata
*array2,int n);</p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>PFCMPEQ is a
vector instruction that performs a comparison of the destination operand and
the source operand and generates all one bits or all zero bits based on the
result of the corresponding comparison. <o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>The PFCMPEQ
instruction performs the following operations:<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>IF (mmreg1[31:0] =
mmreg2/mem64[31:0])<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Courier New"'>THEN
mmreg1[31:0] = FFFF_FFFFh<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>ELSE mmreg1[31:0] =
0000_0000h<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>IF (mmreg1[63:32] =
mmreg2/mem64[63:32]<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Courier New"'>THEN
mmreg1[63:32] = FFFF_FFFFh<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>ELSE mmreg1[63:32] =
0000_0000h<o:p></o:p></span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h3><a name="_Toc515503289">PFCMPGE</a></h3>

<p class=MsoBodyText>void _stdcall _pfcmpge(_mmxdata *array1,_mmxdata
*array2,int n);</p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>PFCMPGE is a vector
instruction that performs a comparison of the destination operand and the
source operand and generates all one bits or all zero bits based on the result
of the corresponding comparison. <o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>The PFCMPGE
instruction performs the following operations:<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>IF (mmreg1[31:0]
&gt;= mmreg2/mem64[31:0])<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Courier New"'>THEN
mmreg1[31:0] = FFFF_FFFFh<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>ELSE mmreg1[31:0] =
0000_0000h<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>IF (mmreg1[63:32]
&gt;= mmreg2/mem64[63:32]<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Courier New"'>THEN
mmreg1[63:32] = FFFF_FFFFh<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>ELSE mmreg1[63:32] =
0000_0000h<o:p></o:p></span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h3><a name="_Toc515503290">PFCMPGT</a></h3>

<p class=MsoBodyText>void _stdcall _pfcmpgt(_mmxdata *array1,_mmxdata
*array2,int n);</p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>PFCMPGT is a
vector instruction that performs a comparison of the destination operand and
the source operand and generates all one bits or all zero bits based on the
result of the corresponding comparison. <o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>The PFCMPGT
instruction performs the following operations:<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>IF (mmreg1[31:0]
&gt; mmreg2/mem64[31:0])<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Courier New"'>THEN
mmreg1[31:0] = FFFF_FFFFh<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>ELSE mmreg1[31:0] =
0000_0000h<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>IF (mmreg1[63:32]
&gt; mmreg2/mem64[63:32]<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Courier New"'>THEN
mmreg1[63:32] = FFFF_FFFFh<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>ELSE mmreg1[63:32] =
0000_0000h<o:p></o:p></span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h3><a name="_Toc515503291">PFMAX</a></h3>

<p class=MsoBodyText>void _stdcall _pfmax(_mmxdata *array1,_mmxdata *array2,int
n);</p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>PFMAX is a
vector instruction that returns the larger of the two single-precision,
floating-point operands. Any operation with a zero and a negative number
returns positive zero. An operation consisting of two zeros returns positive
zero. <o:p></o:p></span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>The PFMAX
instruction performs the following operations:<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>IF (mmreg1[31:0]
&gt; mmreg2/mem64[31:0])<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Courier New"'>THEN
mmreg1[31:0] = mmreg1[31:0]<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>ELSE mmreg1[31:0] =
mmreg2/mem64[31:0]<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>IF (mmreg1[63:32]
&gt; mmreg2/mem64[63:32])<o:p></o:p></span></p>

<p class=MsoNormal style='text-indent:.5in'><span style='font-family:"Courier New"'>THEN
mmreg1[63:32] = mmreg1[63:32]<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>ELSE mmreg1[63:32] =
mmreg2/mem64[63:32]<o:p></o:p></span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h3><a name="_Toc515503292">PFMIN</a></h3>

<p class=MsoBodyText>void _stdcall _pfmin(_mmxdata *array1,_mmxdata *array2,int
n);</p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>PFMIN is a
vector instruction that returns the smaller of the two single-precision,
floating-point operands. Any operation with a zero and a positive number
returns positive zero. An operation consisting of two zeros returns positive
zero. <o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>The PFMIN
instruction performs the following operations:<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>IF (mmreg1[31:0]
&lt; mmreg2/mem64[31:0])<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>THEN mmreg1[31:0] =
mmreg1[31:0]<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>ELSE mmreg1[31:0] =
mmreg2/mem64[31:0]<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>IF (mmreg1[63:32]
&lt; mmreg2/mem64[63:32])<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>THEN mmreg1[63:32] =
mmreg1[63:32]<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>ELSE mmreg1[63:32] =
mmreg2/mem64[63:32]<o:p></o:p></span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h3><a name="_Toc515503293">PFMUL</a></h3>

<p class=MsoBodyText>void _stdcall _pfmul(_mmxdata *array1,_mmxdata *array2,int
n);</p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>PFMUL is a
vector instruction that performs multiplication of the destination operand and
the source operand. Both operands are single-precision, floating-point operands
with 24-bit significands. <o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>The PFMUL
instruction performs the following operations:<o:p></o:p></span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>mmreg1[31:0] =
mmreg1[31:0] * mmreg2/mem64[31:0]<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>mmreg1[63:32] =
mmreg1[63:32] * mmreg2/mem64[63:32]<o:p></o:p></span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h3><a name="_Toc515503294">PFRCP</a></h3>

<p class=MsoBodyText>void _stdcall _pfrcp(_mmxdata *array1,_mmxdata *array2,int
n);</p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>PFRCP is a
scalar instruction that returns a low-precision estimate of the reciprocal of
the source operand. The single result value is duplicated in both high and low
halves of this instructions 64-bit result. The source operand is
single-precision with a 24-bit significand, and the result is accurate to 14
bits.<span style="mso-spacerun: yes">  </span>Increased accuracy (the full 24
bits of a single-precision significand) requires the use of two additional
instructions (PFRCPIT1 and PFRCPIT2). The first stage of this increase or
refinement in accuracy (PFRCPIT1) requires that the input and output of the
already executed PFRCP instruction be used as input to the PFRCPIT1
instruction. <o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>The PFRCP
instruction performs the following operations:<o:p></o:p></span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>mmreg1[31:0] =
reciprocal(mmreg2/mem64[31:0])<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>mmreg1[63:32] =
reciprocal(mmreg2/mem64[31:0])<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h3><a name="_Toc515503295">PFRCPIT1</a></h3>

<p class=MsoBodyText>void _stdcall _pfrcpit1(_mmxdata *array1,_mmxdata
*array2,int n);</p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>PFRCPIT1 is a
vector instruction that performs the first step in a Newton-Raphson iteration
to refine the reciprocal approximation produced by the PFRCP instruction (the
second and final step yields a result accurate to 24 bits).<span
style="mso-spacerun: yes">  </span>The behavior of this instruction is only
defined for those combinations of operands such that one source operand was the
input to the PFRCP instruction and the other source operand was the output of
the same PFRCP instruction. <o:p></o:p></span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h3><a name="_Toc515503296">PFRCPIT2</a></h3>

<p class=MsoBodyText>void _stdcall _pfrcpit2(_mmxdata *array1,_mmxdata
*array2,int n);</p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>PFRCPIT2 is a
vector instruction that performs the second and final step in a Newton-Raphson
iteration to refine the reciprocal or reciprocal square root approximation
produced by the PFRCP and PFSQRT instructions, respectively.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>The behavior of
this instruction is only defined for those combinations of operands such that
the first source operand (mmreg1) was the output of either the PFRCPIT1 or
PFRSQIT1 instructions and the second source operand (mmreg2/mem64) was the
output of either the PFRCP or PFRSQRT instructions.<o:p></o:p></span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h3><a name="_Toc515503297">PFRSQRT</a></h3>

<p class=MsoBodyText>void _stdcall _pfrsqrt(_mmxdata *array1,_mmxdata
*array2,int n);</p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>PFRSQRT is a
scalar instruction that returns a low-precision estimate of the reciprocal
square root of the source operand. The single result value is duplicated in
both high and low halves of this instructions 64-bit result. The source
operand is single-precision with a 24-bit significand, and the result is
accurate to 15 bits. Negative operands are treated as positive operands for
purposes of reciprocal square root computation, with the sign of the result the
same as the sign of the source operand. Increased accuracy (the full 24 bits of
a single-precision significand) requires the use of two additional instructions
(PFRSQIT1 and PFRCPIT2). The first stage of this increase or refinement in
accuracy (PFRSQIT1) requires that the input and squared output of the already
executed PFRSQRT instruction be used as input to the PFRSQIT1 instruction.<o:p></o:p></span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h3><a name="_Toc515503298">PFSUB</a></h3>

<p class=MsoBodyText>void _stdcall _pfsub(_mmxdata *array1,_mmxdata *array2,int
n);</p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>PFSUB is a
vector instruction that performs subtraction of the source operand from the
destination operand. Both operands are single-precision, floating-point
operands with 24-bit significands. <o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>The PFSUB
instruction performs the following operations:<o:p></o:p></span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>mmreg1[31:0] =
mmreg1[31:0]  mmreg2/mem64[31:0]<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>mmreg1[63:32] =
mmreg1[63:32]  mmreg2/mem64[63:32]<o:p></o:p></span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h3><a name="_Toc515503299">PFSUBR</a></h3>

<p class=MsoBodyText>void _stdcall _pfsubr(_mmxdata *array1,_mmxdata
*array2,int n);</p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>PFSUBR is a vector
instruction that performs subtraction of the destination operand from the
source operand. Both operands are single-precision, floating-point operands
with 24-bit significands. <o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>The PFSUBR
instruction performs the following operations:<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>mmreg1[31:0] =
mmreg2/mem64[31:0]  mmreg1[31:0]<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>mmreg1[63:32] =
mmreg2/mem64[63:32]  mmreg1[63:32]<o:p></o:p></span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h3><a name="_Toc515503300">PFI2FD</a></h3>

<p class=MsoNormal>void _stdcall _pfi2fd(_mmxdata *array1,_mmxdata *array2,int
n);</p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>PI2FD is a
vector instruction that converts a vector register containing signed, 32-bit
integers to single-precision, floating-point operands. When PI2FD converts an
input operand with more significant digits than are available in the output,
the output is truncated.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>The PI2FD
instruction performs the following operations:<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>mmreg1[31:0] =
float(mmreg2/mem64[31:0])<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>mmreg1[63:32] =
float(mmreg2/mem64[63:32])<o:p></o:p></span></p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<h3><a name="_Toc515503301">PFMULHRW</a></h3>

<p class=MsoBodyText>void _stdcall _pfmulhrw(_mmxdata *array1,_mmxdata
*array2,int n);</p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>The PMULHRW
instruction multiplies the four signed 16-bit integer values in the source
operand (an MMX register or a 64-bit memory location) by the four corresponding
signed 16-bit integer values in the destination operand (an MMX register). The
PMULHRW instruction then adds 8000h to the lower 16 bits of the 32-bit result,
which results in the rounding of the high-order, 16-bit result. The high-order
16 bits of the result (including the sign bit) are stored in the destination
operand.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'>The PMULHRW
instruction provides a numerically more accurate result than the PMULMH
instruction, which truncates the result instead of rounding.<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Times New Roman"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<h2><a name="_Toc515503302">Example of a 3DNOW program in C</a></h2>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal>This example shows a complete example of the usage of this
instructions.</p>

<p class=MsoNormal><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>#include
&lt;stdio.h&gt;<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>// Always include
the mmx header!<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>#include
&lt;mmx.h&gt;<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>//***********************************************<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>// Calculate the
squares of 8 floating point numbers stored in an<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>// mmx data vector.
Each member of the array contains 2 floats.<o:p></o:p></span></p>

<p class=MsoNormal><span lang=FR style='font-family:"Courier New";mso-ansi-language:
FR'>//***********************************************<o:p></o:p></span></p>

<p class=MsoNormal><span lang=FR style='font-family:"Courier New";mso-ansi-language:
FR'>int main(void)<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>{<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>_mmxdata data[4];<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>int i;<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>// Fill the array<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>for (i=0; i&lt;4;i++) {<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">                </span>data[i].Floats.high =
(float)i*2;<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">                </span>data[i].Floats.low =
(float)(i*2+1);<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>}<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>// Execute the multiplication<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>_pfmul(data,data,4);<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>// Always finish the MMX state before
calling any external<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>// function like printf<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>_emms();<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>// Display the results<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>for (i=0; i&lt;4; i++) {<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">                </span>printf(&quot;%d
%f\t&quot;,i*2,data[i].Floats.high);<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">                </span>printf(&quot;%d
%f\n&quot;,1+i*2,data[i].Floats.low);<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>}<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><span
style="mso-spacerun: yes">        </span>return 0;<o:p></o:p></span></p>

<p class=MsoToc1><span style='font-family:"Courier New"'>}<o:p></o:p></span></p>

<p class=MsoNormal><span style='mso-bidi-font-family:Arial'>The output of this
program is:<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>0 0.000000<span
style="mso-spacerun: yes">      </span>1 1.000000<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>2 4.000000<span
style="mso-spacerun: yes">      </span>3 9.000000<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'>4 16.000000<span
style="mso-spacerun: yes">     </span>5 25.000000<o:p></o:p></span></p>

<p class=MsoToc1><span style='font-family:"Courier New"'>6 36.000000<span
style="mso-spacerun: yes">     </span>7 49.000000<o:p></o:p></span></p>

<p class=MsoNormal><span style='font-family:"Courier New"'><![if !supportEmptyParas]>&nbsp;<![endif]><o:p></o:p></span></p>

</div>

</body>

</html>
