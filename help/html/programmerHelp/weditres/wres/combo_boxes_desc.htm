<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>Combo Boxes</title>
</head>

<body>

<h2><a name="_Toc494632021">Combo Boxes</a></h2>
<p>A <i>combo box</i> is a unique type of control, defined by the COMBOBOX
class, that combines much of the functionality of a list box and an edit
control.</p>
<p>This overview describes the types and styles of combo box, the parts of a
combo box, the use of an owner-drawn combo box, and how to subclass a combo box.
Additional features of combo boxes are also discussed.</p>
<p>The Win32® API provides three types of combo boxes:</p>
<ul type="disc">
  <li class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l7 level1 lfo14;tab-stops:list 36.0pt">Simple combo boxes (CBS_SIMPLE)</li>
  <li class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l7 level1 lfo14;tab-stops:list 36.0pt">Drop-down combo boxes (CBS_DROPDOWN)</li>
  <li class="MsoNormal" style="mso-margin-top-alt:auto;mso-margin-bottom-alt:auto;
     mso-list:l7 level1 lfo14;tab-stops:list 36.0pt">Drop-down list boxes (CBS_DROPDOWNLIST)</li>
</ul>
<p>There are also a number of combo box styles that define specific properties.
For example, two styles enable an application to create an owner-drawn combo
box, making the application responsible for displaying information in the
control.</p>
<p>A combo box consists of a list and a selection field. The list presents the
options that a user can select and the selection field displays the current
selection. Except in drop-down list boxes, the selection field is an edit
control and can be used to enter text not available in the list.</p>
<h2><a name="_Toc494632023">Combo Box Types and Styles</a></h2>
<p>Combo boxes can be characterized by type and style. Combo box types determine
whether the combo box list is a drop-down list and whether the selection field
is an edit control. A drop-down list appears only when the user opens it, so it
uses less screen space than a list that is always visible. If the selection
field is an edit control, the user can enter information not available in the
list; otherwise, the user can only select items in the list.</p>
<p>The following table shows the three combo box types and indicates their
drop-down list and edit control attributes.</p>
<table border="0" cellpadding="0" style="mso-cellspacing:1.5pt">
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>Combo box type<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="30%" valign="top" style="width:30.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>Drop-down list<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="37%" valign="top" style="width:37.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>Edit control<o:p>
      </o:p>
      </b></p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Drop-down combo box</p>
    </td>
    <td width="30%" valign="top" style="width:30.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Yes</p>
    </td>
    <td width="37%" valign="top" style="width:37.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Yes</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Drop-down list box</p>
    </td>
    <td width="30%" valign="top" style="width:30.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Yes</p>
    </td>
    <td width="37%" valign="top" style="width:37.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">No</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Simple combo box</p>
    </td>
    <td width="30%" valign="top" style="width:30.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">No</p>
    </td>
    <td width="37%" valign="top" style="width:37.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Yes</p>
    </td>
  </tr>
</table>
<p class="MsoNormal">&nbsp;<o:p>
</o:p>
</p>
<p>Combo box styles define specific properties of a combo box. You can combine
styles; however some styles only apply to certain combo box types. For a table
of combo box styles, see <a href="/wres/combo_box_styles.htm">Combo Box Styles</a>.</p>
<h2><a name="_Toc494632024">Combo Box List</a></h2>
<p>A <i>list</i> is the portion of a combo box that displays the items a user
can select. Typically, an application initializes the contents of the list when
it creates a combo box. Any list item selected by the user is the <i>current
selection</i>. In simple and drop-down combo boxes, the user can type in the
selection field instead of selecting a list item. In these cases, there is no
current selection. For more information, see <a href="#CurrentSelection">Current
Selection</a>.</p>
<h3><a name="_Toc494632025">List Contents</a></h3>
<p>When an application creates a combo box, it typically initializes the combo
box by adding one or more items to the list. Later, an application may add or
delete list items, reinitialize the list, or retrieve item information from it.</p>
<p>An application adds list items to a combo box by sending the <b>CB_ADDSTRING</b>
message to it. The specified item is added to the end of the list or, in a
sorted combo box, in its correct sorted position based on the item's string. In
an unsorted combo box, an application can use the <b>CB_INSERTSTRING</b>
message to insert an item at a specific position. Once added, a list item is
identified by its position.</p>
<p>By using the <b>CB_FINDSTRING</b>
or <b>CB_FINDSTRINGEXACT</b>
message, an application can determine the position of a list item. <b>CB_FINDSTRING</b>
finds an item whose string begins with the specified string. <b>CB_FINDSTRINGEXACT</b>
finds an item whose string matches the string exactly. Neither message is case
sensitive.</p>
<p>An application can remove a list item by using the <b>CB_DELETESTRING</b>
message. If an application needs to reinitialize the combo box list, it can
first clear its entire contents by using the <b>CB_RESETCONTENT</b>
message. When adding multiple items to the list after a combo box has already
been shown, an application can clear the redraw flag to prevent the combo box
from being repainted after each item is added. For more information about
redrawing, see the description of the <b>WM_SETREDRAW</b>
message.</p>
<p>To retrieve the string associated with a list item, an application can use
the <b>CB_GETLBTEXT</b> message.
The item's string is copied to the buffer specified by the application. To
ensure that the buffer is large enough to receive the string, the application
can first use the <b>CB_GETLBTEXTLEN</b>
message to determine the length of the string. To get the number of list items
in a combo box, an application can use the <b>CB_GETCOUNT</b>
message.</p>
<h3><a name="CurrentSelection">Current Selection</a></h3>
<p>The <i>current selection</i> is a list item the user has selected; the
selected text appears in the selection field of the combo box. However, in the
case of a simple combo box or a drop-down combo box, the current selection is
only one form of possible user input in a combo box. The user can also type text
in the selection field.</p>
<p>The current selection is identified by the zero-based index of the selected
list item. An application can set and retrieve it at any time. The parent window
or dialog box procedure receives notification when the user changes the current
selection for a combo box. The parent window or dialog box is not notified when
the application changes the selection.</p>
<p>When a combo box is created, there is no current selection. This is also true
for a simple or drop-down combo box, if the user has edited the contents of the
selection field. To set the current selection, an application sends the <b>CB_SETCURSEL</b>
message to the combo box. An application can also use the <b>CB_SELECTSTRING</b>
message to set the current selection to a list item whose string begins with a
specified string. To determine the current selection, an application sends the <b>CB_GETCURSEL</b>
message to the combo box. If there is no current selection, this message returns
CB_ERR.</p>
<p>When the user changes the current selection in a combo box, the parent window
or dialog-box procedure receives a <b>WM_COMMAND</b>
message with the notification message <b>CBN_SELCHANGE</b>
in the high-order word of the <i>wParam</i> parameter. This notification message
is not sent when the current selection is set using the <b>CB_SETCURSEL</b>
message.</p>
<p>A drop-down combo box or drop-down list box sends the <b>CBN_CLOSEUP</b>
notification to the parent window or dialog-box procedure when the drop-down
list closes. If the user changed the current selection, the combo box also sends
the <b>CBN_SELCHANGE</b> notification when the drop-down list closes. To execute
a specific process each time the user selects a list item, you can handle either
the <b>CBN_SELCHANGE</b> or <b>CBN_CLOSEUP</b> notification message. Typically,
you would wait for the <b>CBN_CLOSEUP</b> notification before processing a
change in the current selection. This can be particularly important if a
significant amount of processing is required.</p>
<p>An application could also process the notification messages <b>CBN_SELENDOK</b>
and <b>CBN_SELENDCANCEL</b>. The
system sends <b>CBN_SELENDOK</b> when the user selects a list item, or selects
an item and then closes the list. This indicates that the user has finished, and
that the selection should be processed. <b>CBN_SELENDCANCEL</b> is sent when the
user selects an item, but then selects another control, presses <span style="mso-bidi-font-size:10.0pt">ESC</span>
while the drop-down list is open, or closes the dialog box. This indicates that
the user's selection should be ignored. <b>CBN_SELENDOK</b> is sent before every
<b>CBN_SELCHANGE</b> message.</p>
<p>In a simple combo box, the system sends the <b>CBN_DBLCLK</b>
notification message when the user double-clicks a list item. In a drop-down
combo box or drop-down list, a single click hides the list, so it is not
possible to double-click an item.</p>
<h3><a name="_Toc494632027">Drop-Down Lists</a></h3>
<p>Certain notifications and messages apply only to combo boxes containing
drop-down lists. When a drop-down list is open or closed, the parent window of a
combo box receives a notification in the form of a <b>WM_COMMAND</b>
message. If the list is being opened, the high-order word of <i>wParam</i> is <b>CBN_DROPDOWN</b>.
If the list is being closed, it is <b>CBN_CLOSEUP</b>.</p>
<p>An application can open the list of a drop-down combo box or drop-down list
box by using the <b>CB_SHOWDROPDOWN</b>
message. It can determine whether the list is open by using the <b>CB_GETDROPPEDSTATE</b>
message and can determine the coordinates of a drop-down list by using the <b>CB_GETDROPPEDCONTROLRECT</b>
message. An application can also increase the width of a drop-down list by using
the <b>CB_SETDROPPEDWIDTH</b>
message.</p>
<h2><a name="_Toc494632028">Edit Control Selection Fields</a></h2>
<p>The <i>selection field</i> is the portion of a combo box that displays the
currently selected list item. In simple and drop-down combo boxes, the selection
field is an edit control and can be used to enter text that is not in the list.</p>
<p>An application can retrieve or set the contents of the selection field and
can determine or set the edit selection. The application can also limit the
amount of text a user can type in the selection field. When the contents of the
selection field change, the system sends notification messages to the parent
window or dialog box procedure.</p>
<p>To retrieve the content of the selection field, an application can send the <b>WM_GETTEXT</b>
message to the combo box. To set the contents of the selection field of a simple
or drop-down combo box, an application can send the <b>WM_SETTEXT</b>
message to the combo box.</p>
<p>The <i>edit selection</i> is the range of selected text, if any, in the
selection field of a simple or drop-down combo box. An application can determine
the starting and ending character positions of the current selection by using
the <b>CB_GETEDITSEL</b> message.
It can also select characters in the edit selection by using the <b>CB_SETEDITSEL</b>
message.</p>
<p>Initially, the amount of text that the user can type into the selection field
is limited by the size of the selection field. However, if the combo box has the
CBS_AUTOHSCROLL style, the text can continue beyond the size of the selection
field. An application can use the <b>CB_LIMITTEXT</b>
message to limit the amount of text a user can type into the selection field,
regardless of whether the control has the CBS_AUTOHSCROLL style.</p>
<p>When the user edits the content of the selection field, the parent window or
dialog box procedure receives notification messages. The <b>CBN_EDITUPDATE</b>
message is sent first, indicating that the text in the selection field has been
edited. After the altered text is displayed, the system sends <b>CBN_EDITCHANGE</b>.
When the selection field content changes as the result of a list item being
selected, these messages are not sent.</p>
<h2><a name="_Toc494632029">Owner-Drawn Combo Boxes</a></h2>
<p>An application can create an <i>owner-drawn</i> combo box to take
responsibility for painting list items. The parent window or dialog box of an
owner-drawn combo box (its <i>owner</i>) receives <b>WM_DRAWITEM</b>
messages when a portion of the combo box needs to be painted. An owner-drawn
combo box can list information other than, or in addition to, text strings.
Owner-drawn combo boxes can be of any type. However, the edit control in a
simple or drop-down combo box can only display text, while the owner paints the
selection field in a drop-down list box.</p>
<p>The owner of an owner-drawn combo box must process the <b>WM_DRAWITEM</b>
message. This message is sent whenever a portion of the combo box must be
redrawn. The owner may need to process other messages, depending on the styles
specified for the combo box.</p>
<p>An application can create an owner-drawn combo box by specifying the
CBS_OWNERDRAWFIXED or CBS_OWNERDRAWVARIABLE style. If all list items in the
combo box are the same height, such as strings or icons, an application can use
the CBS_OWNERDRAWFIXED style. If list items are of varying height, like bitmaps
of different size, an application can use the CBS_OWNERDRAWVARIABLE style.</p>
<p>The owner of an owner-drawn combo box can process a <b>WM_MEASUREITEM</b>
message to specify the dimensions of list items in the combo box. If the
application creates the combo box by using the CBS_OWNERDRAWFIXED style, the
system sends the <b>WM_MEASUREITEM</b> message only once. The dimensions
specified by the owner are used for all list items. If the CBS_OWNERDRAWVARIABLE
style is used, the system sends a <b>WM_MEASUREITEM</b> message for each list
item added to the combo box. The owner can determine or set the height of a list
item at any time by using the <b>CB_GETITEMHEIGHT</b>
and <b>CB_SETITEMHEIGHT</b>
messages, respectively.</p>
<p>If the information displayed in an owner-drawn combo box includes text, an
application can keep track of the text for each list item by specifying the
CBS_HASSTRINGS style. Combo boxes with the CBS_SORT style are sorted based on
this text. If a combo box is sorted and not of the CBS_HASSTRINGS style, the
owner must process the <b>WM_COMPAREITEM</b>
message.</p>
<p>In an owner-drawn combo box, the owner must keep track of list items
containing information other than or in addition to text. One convenient way to
do this is to save the handle to the information as item data. For more
information about item data, see <a href="../../api/api2/combobox_5d0z.htm">Data
Associated with List Items</a>. To free data objects associated with items in a
combo box, the owner can process the <b>WM_DELETEITEM</b>
message.</p>
<p>For an example of an owner-drawn combo box, see <a href="../../api/api2/combobox_9ge0.htm">Creating
an Owner-Drawn Combo Box</a>.</p>
<h2><a name="_Toc494632030">Subclassed Combo Boxes</a></h2>
<p><i>Subclassing</i> is a procedure that allows an application to intercept and
process messages sent or posted to a window. By using subclassing, an
application can substitute its own processing for certain messages, while
leaving most message processing to the class-defined window procedure.</p>
<p>When the operating system creates a window, it saves information about it in
an internal data structure that includes a pointer to the window procedure. To
subclass a window, an application calls the <b>SetClassLong</b>
function to replace the pointer to that procedure with a pointer to an
application-defined subclass procedure. Thereafter, all messages to the window
are sent to the subclass procedure. This procedure then uses the <b>CallWindowProc</b>
function to pass unprocessed messages to the original window procedure. For a
description of the message processing performed by the COMBOBOX class window
procedure, see <a href="../../api/api2/combobox_6qeq.htm">Default Combo Box
Behavior</a>.</p>
<p>When the combo box is outside a dialog box, an application cannot process the
TAB, ENTER, and ESC keys unless it uses a subclass procedure. When a simple or
drop-down combo box receives the input focus, it immediately sets the focus to
its child edit control. Therefore, an application must subclass the edit control
to intercept keyboard input for a simple or drop-down combo box. For an example
of this, see <a href="../../api/api2/combobox_30l4.htm">Subclassing a Combo Box</a>.</p>
<p>If a subclass procedure processes the <b>WM_PAINT</b>
message, it must use the <b>BeginPaint</b>
function to prepare for painting. Before calling the <b>EndPaint</b>
function, it passes the device-context (DC) handle as the <i>wParam</i>
parameter for the window procedure. If <b>EndPaint</b> is called first, the
class window procedure does no painting because <b>EndPaint</b> validates the
entire window.</p>
<p>A technique related to subclassing is <i>superclassing</i>. A superclass
resembles any other class except that its window procedure does not call <b>DefWindowProc</b>
to handle unprocessed messages. Instead, it passes unprocessed messages to the
window procedure for the parent window class. Follow the guidelines in Window
Procedures to avoid problems that can occur with subclassing and
superclassing.</p>
<h2><a name="_Toc494632031">Special Combo Box Features</a></h2>
<p>The Win32 API provides special-purpose messages and functions that enable an
application to display a directory listing in a combo box, associate data with
list items in a combo box, and change the keyboard interface for a drop-down
combo box or drop-down list box.</p>
<h3><a name="_Toc494632032">Directory Lists</a></h3>
<p>An application can add the names of files or subdirectories to a combo box by
sending the <b>CB_DIR</b> message
to it. The <i>wParam</i> parameter for this message specifies the attributes of
the files to add, and the <i>lParam</i> parameter is a pointer to the text
string that defines the file specification.</p>
<p>You can use the <b>DlgDirListComboBox</b>
function to replace the contents of a combo box in a dialog box. The function
fills the combo box with the names of drives, directories, and files that match
a specified set of criteria. The <b>DlgDirSelectComboBoxEx</b>
function retrieves the current selection in a combo box initialized by <b>DlgDirListComboBox</b>.
These functions make it possible for the user to select a drive, directory, or
file from a combo box without typing the location and name of the file.</p>
<p>The <b>DlgDirListComboBox</b> and <b>DlgDirSelectComboBoxEx</b> functions and
the <b>CB_DIR</b> message are similar to the <b>DlgDirList</b>
and <b>DlgDirSelectEx</b>
functions and the <b>LB_DIR</b>
message used with list boxes.</p>
<h3><a name="_Toc494632033">Data Associated with List Items</a></h3>
<p>An application can associate data with the list items in a combo box. The <b>CB_SETITEMDATA</b>
message associates a <b>DWORD</b> value with a list item, and the <b>CB_GETITEMDATA</b>
retrieves the value associated with a list item.</p>
<p>The example in <a href="../../api/api2/combobox_9ge0.htm">Creating an
Owner-Drawn Combo Box</a> uses item data to associate a constant with each item
in a drop-down list box. Such a unique value identifies each item independent of
its sorted position.</p>
<p>Other applications might use item data to associate a handle or pointer with
a list item. If so, an application can process a <b>WM_DELETEITEM</b>
message to delete or free the specified object when the list item is deleted</p>
<h3><a name="_Toc494632034">The Extended User Interface</a></h3>
<p>Drop-down combo boxes and drop-down list boxes support an alternative
keyboard interface called the <i>extended user interface</i>. By default, the F4
key opens or closes the list, and the <span style="mso-bidi-font-size:10.0pt">DOWN
ARROW</span> changes the current selection. In a combo box with the extended
user interface, however, the F4 key is disabled and pressing the <span style="mso-bidi-font-size:10.0pt">DOWN
ARROW</span> key opens the drop-down list.</p>
<p>To select the user interface for a combo box, an application can send the <b>CB_SETEXTENDEDUI</b>
message to the combo box. A TRUE value for the <i>wParam</i> parameter enables
the extended user interface; a FALSE value sets the default user interface. To
determine whether a combo box uses the extended user interface, an application
can send the <b>CB_GETEXTENDEDUI</b>
message to the combo box.</p>
<h2><a name="_Toc494632035">Combo Box Notifications</a></h2>
<p>Messages from combo boxes are sent as notifications in the form of <b>WM_COMMAND</b>
messages. The notification message is stored in the high word of the <i>wParam</i>
parameter, and an application can process the following combo box notification
messages.</p>
<table border="0" cellpadding="0" width="100%" style="width:100.0%;mso-cellspacing:
 1.5pt">
  <tr>
    <td width="36%" valign="top" style="width:36.62%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b><span lang="FR" style="mso-ansi-language:FR">Notification
      message<o:p>
      </o:p>
      </span></b></p>
    </td>
    <td width="62%" valign="top" style="width:62.36%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b><span lang="FR" style="mso-ansi-language:FR">Description<o:p>
      </o:p>
      </span></b></p>
    </td>
  </tr>
  <tr>
    <td width="36%" valign="top" style="width:36.62%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CBN_CLOSEUP</b></p>
    </td>
    <td width="62%" valign="top" style="width:62.36%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Indicates the list in a drop-down combo box or
      drop-down list box is about to close.</p>
    </td>
  </tr>
  <tr>
    <td width="36%" valign="top" style="width:36.62%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CBN_DBLCLK</b></p>
    </td>
    <td width="62%" valign="top" style="width:62.36%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Indicates the user has double-clicked a list item in
      a simple combo box.</p>
    </td>
  </tr>
  <tr>
    <td width="36%" valign="top" style="width:36.62%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CBN_DROPDOWN</b></p>
    </td>
    <td width="62%" valign="top" style="width:62.36%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Indicates the list in a drop-down combo box or
      drop-down list box is about to open.</p>
    </td>
  </tr>
  <tr>
    <td width="36%" valign="top" style="width:36.62%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CBN_EDITCHANGE</b></p>
    </td>
    <td width="62%" valign="top" style="width:62.36%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Indicates the user has changed the text in the edit
      control of a simple or drop-down combo box. This notification message is
      sent <i>after</i> the altered text is displayed.</p>
    </td>
  </tr>
  <tr>
    <td width="36%" valign="top" style="width:36.62%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CBN_EDITUPDATE</b></p>
    </td>
    <td width="62%" valign="top" style="width:62.36%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Indicates the user has changed the text in the edit
      control of a simple or drop-down combo box. This notification message is
      sent <i>before</i> the altered text is displayed.</p>
    </td>
  </tr>
  <tr>
    <td width="36%" valign="top" style="width:36.62%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CBN_ERRSPACE</b></p>
    </td>
    <td width="62%" valign="top" style="width:62.36%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Indicates the combo box cannot allocate enough memory
      to carry out a request, such as adding a list item.</p>
    </td>
  </tr>
  <tr>
    <td width="36%" valign="top" style="width:36.62%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CBN_KILLFOCUS</b></p>
    </td>
    <td width="62%" valign="top" style="width:62.36%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Indicates the combo box is about to lose the input
      focus.</p>
    </td>
  </tr>
  <tr>
    <td width="36%" valign="top" style="width:36.62%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CBN_SELCHANGE</b></p>
    </td>
    <td width="62%" valign="top" style="width:62.36%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Indicates the current selection has changed.</p>
    </td>
  </tr>
  <tr>
    <td width="36%" valign="top" style="width:36.62%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CBN_SELENDCANCEL</b></p>
    </td>
    <td width="62%" valign="top" style="width:62.36%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Indicates that the selection made in the drop down
      list, while it was dropped down, should be ignored.</p>
    </td>
  </tr>
  <tr>
    <td width="36%" valign="top" style="width:36.62%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CBN_SELENDOK</b></p>
    </td>
    <td width="62%" valign="top" style="width:62.36%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Indicates that the selection made drop down list,
      while it was dropped down, should be accepted.</p>
    </td>
  </tr>
  <tr>
    <td width="36%" valign="top" style="width:36.62%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CBN_SETFOCUS</b></p>
    </td>
    <td width="62%" valign="top" style="width:62.36%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Indicates the combo box has received the input focus.</p>
    </td>
  </tr>
</table>
<h2><a name="_Toc494632036">Default Combo Box Behavior</a></h2>
<p>This following table describes the messages specifically handled by the
predefined COMBOBOX class window procedure.</p>
<table border="0" cellpadding="0" style="mso-cellspacing:1.5pt">
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>Message<o:p>
      </o:p>
      </b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>Description<o:p>
      </o:p>
      </b></p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_ADDSTRING</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_ADDSTRING</b>
      message to the list window to add a list item.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_DELETESTRING</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_DELETESTRING</b>
      message to the list window to delete a list item.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_DIR</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Adds the file names matching the specified attributes
      and path to the list.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_FINDSTRING</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_FINDSTRING</b>
      message to the list window. This message returns the index of the first
      list item that begins with the specified text.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_FINDSTRINGEXACT</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_FINDSTRING</b> message to the list
      window. This message returns the index of the first list item exactly
      matching the specified text.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_GETCOUNT</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_GETCOUNT</b> message to the list window. It returns the number of list items.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_GETCURSEL</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_GETCURSEL</b>
      message to the list window. It returns the index of the currently selected
      item, if any.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_GETDROPPEDCONTROLRECT</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Fills the specified rectangle structure with the
      screen coordinates of a drop-down list.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_GETDROPPEDSTATE</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Returns TRUE if a drop-down list is open; otherwise,
      it returns FALSE.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_GETDROPPEDWIDTH</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Returns the minimum allowable width, in pixels, of
      the drop-down list.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_GETEDITSEL</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>EM_GETSEL</b>
      message to the edit control, and it returns the starting and ending
      position of the current selection. In drop-down list boxes, the window
      procedure returns CB_ERR.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_GETEXTENDEDUI</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Returns TRUE if the combo box is a drop-down combo
      box or drop-down list box and the extend user-interface flag is set;
      otherwise, it returns FALSE.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_GETHORIZONTALEXTENT</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_GETHORIZONTALEXTENT</b>
      message to the list window. It returns the scrollable width, in pixels, of
      the drop-down list.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_GETITEMDATA</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_GETITEMDATA</b>
      message to the list window. It returns the value associated with the
      specified list item.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_GETITEMHEIGHT</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_GETITEMHEIGHT</b>
      message to the list window. It returns the height, in pixels, of the
      specified owner-drawn list item.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_GETLBTEXT</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_GETTEXT</b>
      message to the list window. It copies the specified list text to the
      specified buffer.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_GETLBTEXTLEN</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_GETTEXTLEN</b>
      message to the list window. It returns the length, in <b>TCHARs</b>, of
      the specified list text.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_GETLOCALE</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_GETLOCALE</b>
      message to the list window. It returns the current locale for the list.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_GETTOPINDEX</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_GETTOPINDEX</b>
      message to the list window. It returns the index of the first visible item
      in the drop-down list.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_INITSTORAGE</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_INITSTORAGE</b>
      message to the list window. It initializes space for the specified number
      of items and the specified number of bytes for item strings.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_INSERTSTRING</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_INSERTSTRING</b>
      message to the list window. It inserts a list item at the specified
      position.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_LIMITTEXT</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>EM_LIMITTEXT</b>
      message to the edit control. It sets the maximum number of characters a
      user can enter in the edit control. In drop-down list boxes, the window
      procedure returns CB_ERR.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_RESETCONTENT</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_RESETCONTENT</b>
      message to the list window, and it removes the contents of the list.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_SELECTSTRING</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_SELECTSTRING</b>
      message to the list window. It selects the first list item, if any, that
      begins with the characters in the specified text.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_SETCURSEL</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_SETCURSEL</b>
      message to the list window, and it sets the current selection.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_SETDROPPEDWIDTH</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sets the minimum allowable width, in pixels, of the
      drop down list.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_SETEDITSEL</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>EM_SETSEL</b>
      message to the edit control. It selects the specified range of text. In
      drop-down list boxes, the window procedure returns CB_ERR.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_SETEXTENDEDUI</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sets or clears the extended user-interface flag. This
      flag changes the keys that open and close the list in a drop-down combo
      box or drop-down list box. If the combo box is a simple combo box, the
      window procedure returns CB_ERR.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_SETHORIZONTALEXTENT</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_SETHORIZONTALEXTENT</b>
      message to the list window. It sets the scrollable width, in pixels, of
      the drop down list.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_SETITEMDATA</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_SETITEMDATA</b>
      message to the list window. It associates the specified value with a list
      item.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_SETITEMHEIGHT</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_SETITEMHEIGHT</b>
      message to the list window. It sets the height of the specified
      owner-drawn list item or the selection field.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_SETLOCALE</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_SETLOCALE</b>
      message to the list window, and it sets the current locale for the list.
      The locale affects how the list is sorted if it has the CBS_SORT style and
      strings are added using <b>CB_ADDSTRING</b>.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_SETTOPINDEX</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sends an <b>LB_SETTOPINDEX</b>
      message to the list window. It scrolls the drop-down list so the specified
      item is at the top of the visible range.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>CB_SHOWDROPDOWN</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Shows or hides the drop-down list. This message has
      no effect on simple combo boxes.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_CHAR</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Processes character input. In drop-down list boxes,
      this message is passed to the list window, which moves the selection to
      the first item beginning with the specified character. In simple and
      drop-down combo boxes, this message is passed to the edit control.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_CLEAR</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Deletes the edit selection. In simple and drop-down
      combo boxes, the edit control processes this message. In drop-down list
      boxes, the window procedure returns CB_ERR.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_COMMAND</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Processes notification messages from the edit control
      and list window and sends corresponding combo box notification messages to
      the parent window.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">&nbsp;</p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">For edit control notifications, the window procedure
      may update the list window's current selection, caret index, and top
      index. For list notification messages, the window procedure may update the
      content of the selection field.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_COMPAREITEM</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Passes the message to the parent window, enabling the
      application to specify the relative sort position of two owner-drawn list
      items. The combo box window receives this message from the list window.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_COPY</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Copies the edit selection to the clipboard. In simple
      and drop-down combo boxes, the edit control processes this message. In
      drop-down list boxes, the window procedure returns CB_ERR.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_CREATE</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Initializes the combo box.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_CUT</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Deletes the edit selection and places it on the
      clipboard. In simple and drop-down combo boxes, the edit control processes
      this message. In drop-down list boxes, the window procedure returns CB_ERR.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_DELETEITEM</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Passes the message to the parent window, notifying
      the application that a list item has been deleted. The combo box window
      receives this message from the list window.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_DRAWITEM</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Passes the message on to the parent window enabling
      the application to paint the specified list item. The combo box window
      receives this message from the list window. The window procedure can also
      originate this message to have the application paint the selection field
      of a drop-down list box.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_ENABLE</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sets the state to enable or prohibit mouse and
      keyboard input.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_ERASEBKGND</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Returns 1, indicating that the background is erased.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_GETDLGCODE</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Returns a combination of the DLG_WANTCHARS and
      DLGC_WANTARROWS values.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_GETFONT</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Returns the handle to the current font with which the
      combo box will draw its text.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_GETTEXT</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Copies the contents of the selection field to the
      specified buffer. In simple and drop-down combo boxes, the edit control
      processes this message.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_GETTEXTLENGTH</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Returns the length, in characters, of the text in the
      selection field. In simple and drop-down combo boxes, the edit control
      processes this message.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_KEYDOWN</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Processes noncharacter keyboard input. In drop-down
      list boxes, this message is sent to the list window, which may show or
      hide itself, or change its current selection or caret index. In simple and
      drop-down combo boxes, this message is passed to the edit control. The
      edit control passes certain keys to the list window, such as the UP and
      DOWN ARROW keys and the F4 key.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_KILLFOCUS</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Hides the highlight in the selection field and closes
      the drop-down list, if necessary. If the window receiving the input focus
      is part of the combo box (for example, the edit control), this message is
      ignored.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_LBUTTONDBLCLK</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Same as <b>WM_LBUTTONDOWN</b>.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_LBUTTONDOWN</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sets the focus to the combo box and, for drop-down
      combo boxes and drop-down lists, can open or close the list. If it opens
      the list, the window procedure captures the mouse to enable selection by
      dragging and releasing the mouse button.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_LBUTTONUP</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Releases the mouse capture if the mouse opened the
      list.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_MEASUREITEM</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Posts the message to the parent window, enabling the
      application to modify the contents of the specified <b>MEASUREITEMSTRUCT</b>
      structure. The combo box window receives this message from the list
      window.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_MOUSEMOVE</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Posts the message to the list window if the mouse has
      opened the list and the mouse button is still down. This enables a user to
      select an item by dragging the mouse pointer to a list item and then
      releasing the button.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_NCCREATE</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Allocates an internal data structure used by the
      combo box window procedure.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_NCDESTROY</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Frees resources allocated in response to the <b>WM_NCCREATE</b>
      message.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_PAINT</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Paints the invalid region of the combo box. If <i>wParam</i>
      is not NULL, it is assumed to be a DC handle passed from a subclass
      function. The window procedure uses the specified DC instead of calling <b>BeginPaint</b>
      and <b>EndPaint</b>.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_PASTE</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Replaces the edit selection with the contents of the
      clipboard. In simple and drop-down combo boxes, the edit control processes
      this message. In drop-down list boxes, the window procedure returns CB_ERR.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_SETFOCUS</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sets the focus to the edit control or, in drop-down
      list boxes, inverts the selection field and turns on the caret in the list
      window.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_SETFONT</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Saves the specified font handle in an internal
      structure, adjusts the dimensions of the selection field and list, and
      invalidates the combo box window. Text in the selection field and the list
      is displayed in the saved font.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_SETREDRAW</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sets or clears the redraw flag. If the redraw flag is
      cleared, the combo box is not repainted until the flag is set again.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_SETTEXT</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Sets the contents of the edit control. In simple and
      drop-down combo boxes, the edit control processes this message. In
      drop-down list boxes, the window procedure returns CB_ERR.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_SIZE</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Resizes the child windows, if necessary.</p>
    </td>
  </tr>
  <tr>
    <td width="33%" valign="top" style="width:33.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal"><b>WM_SYSKEYDOWN</b></p>
    </td>
    <td width="67%" valign="top" style="width:67.0%;padding:.75pt .75pt .75pt .75pt">
      <p class="MsoNormal">Opens or closes the drop-down list depending on which
      arrow key the user pressed.</p>
    </td>
  </tr>
</table>
<p class="MsoNormal">&nbsp;<o:p>
</o:p>
</p>
<p>All other messages are passed to the <b>DefWindowProc</b>
function for default processing.</p>

</body>

</html>
