<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>Image Lists</title>
</head>

<body>

<h2>Image Lists</h2>
<hr SIZE="1">
<p>An image list is a collection of images of the same size, each of which can
be referred to by its index. Image lists are used to efficiently manage large
sets of icons or bitmaps. All images in an image list are contained in a single,
wide bitmap in screen device format. An image list can also include a monochrome
bitmap that contains masks used to draw images transparently (icon style).</p>
<h3><a name="Using_Image_Lists"></a>Using Image Lists</h3>
<p>The Microsoft® Win32®&nbsp;application programming interface (API) provides
image list functions that enable you to create and destroy image lists, add and
remove images, replace and merge images, draw images, and drag images.</p>
<p>To use the image list functions, include the common control header file in
your source code files and link with the common control export library. In
addition, before calling any image list function, use the <MSHelp:link 
tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_InitCommonControls_cpp">
InitCommonControls</MSHelp:link>
 function to ensure that the common control dynamic-link library (DLL) is
loaded.</p>
<h3><a name="Types"></a>Types</h3>
<p>There are two types of image lists: nonmasked and masked. A nonmasked image
list consists of a color bitmap that contains one or more images. A masked image
list consists of two bitmaps of equal size. The first is a color bitmap that
contains the images, and the second is a monochrome bitmap that contains a
series of masks—one for each image in the first bitmap.</p>
<p>When a nonmasked image is drawn, it is simply copied into the target device
context; that is, it is drawn over the existing background color of the device
context. When a masked image is drawn, the bits of the image are combined with
the bits of the mask, typically producing transparent areas in the bitmap where
the background color of the target device context shows through. There are
several drawing styles that you can specify when drawing a masked image. For
example, you can specify that the image be dithered to indicate a selected
object.</p>
<h3><a name="Creating_and_Destroy"></a>Creating and Destroying Image Lists</h3>
<p>You create an image list by calling the <MSHelp:link tabIndex=0 
xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_Create_cpp">
ImageList_Create</MSHelp:link>
 function. The parameters include the type of image list to create, the
dimensions of each image, and the number of images you intend to add to the
list. For a nonmasked image list, the function creates a single bitmap large
enough to hold the specified number of images of the given dimensions. Then it
creates a screen-compatible device context and selects the bitmap into it. For a
masked image list, the function creates two bitmaps and two screen-compatible
device contexts. It selects the image bitmap into one device context and the
mask bitmap into the other. The common control DLL contains the executable code
for the image list functions.</p>
<p>In <b>ImageList_Create</b>, you specify the initial number of images that
will be in an image list as well as the number of images by which the list can
grow. So if you attempt to add more images than you initially specified, the
image list automatically grows to accommodate the new images.</p>
<p>If <b>ImageList_Create</b> succeeds, it returns a handle to the HIMAGELIST
type. You use this handle in other image list functions to access the image list
and manage the images. You can add and remove images, copy images from one image
list to another, and merge images from two different image lists. When you no
longer need an image list, you can destroy it by specifying its handle in a call
to the <MSHelp:link tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_Destroy_cpp">
ImageList_Destroy</MSHelp:link>
 function.</p>
<p>The following example creates a masked image list and uses the <MSHelp:link 
tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_AddIcon_cpp">
ImageList_AddIcon</MSHelp:link>
 function to add two icons to the list.</p>
<pre class="clsCode" style="DISPLAY: none" AUTOHILITE="1"><font color="blue">//</font><font color="green"> AddIconsToImageList - creates a masked image list and adds some </font>
<font color="blue">//</font><font color="green"> icons to it. </font>
<font color="blue">//</font><font color="green"> Returns the handle to the new image list. </font>
<font color="blue">//</font><font color="green"> hinst - handle to the application instance. </font>
<font color="blue">//</font><font color="green"> </font>
<font color="blue">//</font><font color="green"> Global variables and constants </font>
<font color="blue">//</font><font color="green">     g_nBird and g_nTree - indexes of the images. </font>
<font color="blue">//</font><font color="green">     cx_icon and cy_icon - width and height of the icon. </font>
<font color="blue">//</font><font color="green">     num_icons - number of icons to add to the image list. </font>
extern int g_nBird, g_nTree; 
 
#define CX_ICON  32 
#define CY_ICON  32 
#define NUM_ICONS 3 
 
HIMAGELIST AddIconsToImageList(HINSTANCE hinst) 
{ 
    HIMAGELIST himlIcons;  <font color="blue">//</font><font color="green"> handle to new image list </font>
    HICON hicon;           <font color="blue">//</font><font color="green"> handle to icon </font>
 
    <font color="blue">//</font><font color="green"> Ensure that the common control DLL is loaded. </font>
    InitCommonControls(); 

    <font color="blue">//</font><font color="green"> Create a masked image list large enough to hold the icons. </font>
    himlIcons = ImageList_Create(CX_ICON, CY_ICON, ILC_MASK, NUM_ICONS, 0); 
 
    <font color="blue">//</font><font color="green"> Load the icon resources, and add the icons to the image list. </font>
    hicon = LoadIcon(hinst, MAKEINTRESOURCE(IDI_BIRD)); 
    g_nBird = ImageList_AddIcon(himlIcons, hicon); 
 
    hicon = LoadIcon(hinst, MAKEINTRESOURCE(IDI_TREE)); 
    g_nTree = ImageList_AddIcon(himlIcons, hicon); 
 
    return himlIcons; 
} 
 </pre>
<h3><a name="Adding_and_Removing_"></a>Adding and Removing Images</h3>
<p>You can add bitmapped images, icons, or cursors to an image list. You add
bitmapped images by specifying the handles to two bitmaps in a call to the <MSHelp:link tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_Add_cpp">
ImageList_Add</MSHelp:link>
 function. The first bitmap contains one or more images to add to the image
bitmap, and the second bitmap contains the masks to add to the mask bitmap. For
nonmasked image lists, the second bitmap handle is ignored; it can be set to
NULL.</p>
<p>The <MSHelp:link tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_AddMasked_cpp">
ImageList_AddMasked</MSHelp:link>
 function also adds bitmapped images to a masked image list. This function is
similar to <b>ImageList_Add</b>, except that you do not specify a mask bitmap.
Instead, you specify a color that the system combines with the image bitmap to
automatically generate the masks. Each pixel of the specified color in the image
bitmap is changed to black, and the corresponding bit in the mask is set to 1.
As a result, any pixel in the image that matches the specified color is
transparent when the image is drawn.</p>
<p>The <b>ImageList_AddIcon</b> function adds an icon or cursor to an image
list. If the image list is masked, <b>ImageList_AddIcon</b> adds the mask
provided with the icon or cursor to the mask bitmap. If the image list is
nonmasked, the mask for the icon or cursor is not used when drawing the image.</p>
<p>You can create an icon based on an image and mask in an image list by using
the <MSHelp:link tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_GetIcon_cpp">
ImageList_GetIcon</MSHelp:link>
 function. The function returns the handle to the new icon.</p>
<p><b>ImageList_Add</b>, <b>ImageList_AddMasked</b>, and <b>ImageList_AddIcon</b>
assign an index to each image as it is added to an image list. The indexes are
zero-based; that is, the first image in the list has an index of zero, the next
has an index of one, and so on. After adding a single image, the functions
return the index of the image. When more than one image is added at a time, the
functions return the index of the first image.</p>
<p>The <MSHelp:link tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_Remove_cpp">
ImageList_Remove</MSHelp:link>
 function removes an image from an image list.</p>
<h3><a name="Replacing_and_Mergin"></a>Replacing and Merging Images</h3>
<p>The <MSHelp:link tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_Replace_cpp">
ImageList_Replace</MSHelp:link>
 and <MSHelp:link tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_ReplaceIcon_cpp">
ImageList_ReplaceIcon</MSHelp:link>
 functions replace an image in an image list with a new image. <b>ImageList_Replace</b>
replaces an image with a bitmapped image and mask, and <b>ImageList_ReplaceIcon</b>
replaces an image with an icon or cursor.</p>
<p>The <MSHelp:link tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_Merge_cpp">
ImageList_Merge</MSHelp:link>
 function merges two images, storing the new image in a new image list. The new
image is created by drawing the second image transparently over the first. The
mask for the new image is the result of performing a logical OR operation on the
bits of the masks for the two existing images.</p>
<h3><a name="Drawing_Images"></a>Drawing Images</h3>
<p>To draw an image, you use the <MSHelp:link tabIndex=0 
xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_Draw_cpp">
ImageList_Draw</MSHelp:link>
 or <MSHelp:link tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_DrawEx_cpp">
ImageList_DrawEx</MSHelp:link>
 function. You specify the handle to an image list, the index of the image to
draw, the handle to the destination device context, a location within the device
context, and one or more drawing styles.</p>
<p>When you specify the <span class="clsLiteral">ILD_TRANSPARENT</span> style, <b>ImageList_Draw</b>
or <b>ImageList_DrawEx</b> uses a two-step process to draw a masked image.
First, it performs a logical AND operation on the bits of the image and the bits
of the mask. Then it performs a logical XOR operation on the results of the
first operation and the background bits of the destination device context. This
process creates transparent areas in the resulting image; that is, each white
bit in the mask causes the corresponding bit in the resulting image to be
transparent.</p>
<p>Before drawing a masked image on a solid color background, you should use the
<MSHelp:link tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_SetBkColor_cpp">
ImageList_SetBkColor</MSHelp:link>
 function to set the background color of the image list to the same color as the
destination. Setting the color eliminates the need to create transparent areas
in the image and enables <b>ImageList_Draw</b> or <b>ImageList_DrawEx</b> to
simply copy the image to the destination device context, resulting in a
significant increase in performance. To draw the image, specify the <span class="clsLiteral">ILD_NORMAL</span>
style in a call to <b>ImageList_Draw</b> or <b>ImageList_DrawEx</b>.</p>
<p>You can set the background color for a masked image list at any time so that
it draws correctly on any solid background. Setting the background color to
CLR_NONE causes images to be drawn transparently by default. To retrieve the
background color of an image list, use the <MSHelp:link tabIndex=0 
xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_GetBkColor_cpp">
ImageList_GetBkColor</MSHelp:link>
 function.</p>
<p>The <span class="clsLiteral">ILD_BLEND25</span> and <span class="clsLiteral">ILD_BLEND50</span>
styles dither the image with the system highlight color. These styles are useful
if you use a masked image to represent an object that the user can select. For
example, you can use the <span class="clsLiteral">ILD_BLEND50</span> style to
draw the image when the user selects it.</p>
<p>A nonmasked image is copied to the destination device context using the
SRCCOPY raster operation. The colors in the image appear the same regardless of
the background color of the device context. The drawing styles specified in <b>ImageList_Draw</b>
or <b>ImageList_DrawEx</b> also have no effect on the appearance of a nonmasked
image.</p>
<h4><a name="Drawing_the_image"></a>Drawing the image</h4>
<p>The following function draws an image and saves the client coordinates of the
image's bounding rectangle. A subsequent function uses the bounding rectangle to
determine whether the user has clicked the image.</p>
<pre class="clsCode" style="DISPLAY: none" AUTOHILITE="1"><font color="blue">//</font><font color="green"> DrawTheImage - draws an image transparently and saves </font>
<font color="blue">//</font><font color="green"> the bounding rectangle of the drawn image.</font>
<font color="blue">//</font><font color="green"> Returns TRUE if successful, or FALSE otherwise. </font>
<font color="blue">//</font><font color="green"> hwnd - handle to the window in which to draw the image. </font>
<font color="blue">//</font><font color="green"> himl - handle to the image list that contains the image. </font>
<font color="blue">//</font><font color="green"> cx and cy - client coordinates for the upper-left corner of the image. </font>
<font color="blue">//</font><font color="green"> </font>
<font color="blue">//</font><font color="green"> Global variables and constants </font>
<font color="blue">//</font><font color="green">     g_nImage - index of the image to draw. </font>
<font color="blue">//</font><font color="green">     g_rcImage - bounding rectangle of the image. </font>
<font color="blue">//</font><font color="green">     CX_IMAGE and CY_IMAGE - width and height of the image. </font>
extern int g_nImage; 
extern RECT g_rcImage; 
 
#define CX_IMAGE 32 
#define CY_IMAGE 32 
 
BOOL DrawTheImage(HWND hwnd, HIMAGELIST himl, int cx, int cy) 
{ 
    HDC hdc; 
 
    if ((hdc = GetDC(hwnd)) == NULL) 
        return FALSE; 
    if (!ImageList_Draw(himl, g_nImage, hdc, cx, cy, ILD_TRANSPARENT)) 
        return FALSE; 
    ReleaseDC(hwnd, hdc); 
 
    SetRect(&amp;g_rcImage, cx, cy, CX_IMAGE + cx, CY_IMAGE + cy); 
 
    return TRUE; 
} </pre>
<h3><a name="Dragging_Images"></a>Dragging Images</h3>
<p>The Win32&nbsp;API includes functions for dragging an image on the screen.
The dragging functions move an image smoothly, in color, and without any
flashing of the cursor. Both masked and unmasked images can be dragged.</p>
<p>The <MSHelp:link tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_BeginDrag_cpp">
ImageList_BeginDrag</MSHelp:link>
 function begins a drag operation. The parameters include the handle to the
image list, the index of the image to drag, and the location of the hot spot
within the image. The hot spot is a single pixel that the dragging functions
recognize as the exact screen location of the image. Typically, an application
sets the hot spot so that it coincides with the hot spot of the mouse cursor.
The <MSHelp:link tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_DragMove_cpp">
ImageList_DragMove</MSHelp:link>
 function moves the image to a new location.</p>
<p>The <MSHelp:link tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_DragEnter_cpp">
ImageList_DragEnter</MSHelp:link>
 function sets the initial position of the drag image within a window and draws
the image at the position. The parameters include the handle to the window in
which to draw the image and the coordinates of the initial position within the
window. The coordinates are relative to the window's upper-left corner, not the
client area. The same is true for all of the image dragging functions that take
coordinates as parameters. This means you must compensate for the widths of
window elements such as the border, title bar, and menu bar when specifying the
coordinates. If you specify a NULL window handle when calling <b>ImageList_DragEnter</b>,
the dragging functions draw the image in the device context associated with the
desktop window, and the coordinates are relative to the upper-left corner of the
screen.</p>
<p><b>ImageList_DragEnter</b> locks all other updates to the given window during
the drag operation. If you need to do any drawing during a drag operation, such
as highlighting the target of the operation, you can temporarily hide the
dragged image by using the <MSHelp:link tabIndex=0 
xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_DragLeave_cpp">
ImageList_DragLeave</MSHelp:link>
 function. Another method is to use the <MSHelp:link tabIndex=0 
xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_getdcex">
GetDCEx</MSHelp:link>
 function with the <b>DCX_LOCKWINDOWUPDATE</b> value to retrieve a device
context that allows you to draw. Be careful, however, not to obliterate the
dragged image.</p>
<p>The <MSHelp:link tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_SetDragCursorImage_cpp">
ImageList_SetDragCursorImage</MSHelp:link>
 function creates a new drag image by combining the given image (typically a
mouse cursor image) with the current drag image. Because the dragging functions
use the new image during a drag operation, you should use the <MSHelp:link 
tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_showcursor">
ShowCursor</MSHelp:link>
 function to hide the actual mouse cursor after calling <b>ImageList_SetDragCursorImage</b>.
Otherwise, the system may appear to have two mouse cursors for the duration of
the drag operation.</p>
<p>When an application calls <b>ImageList_BeginDrag</b>, the system creates a
temporary, internal image list and then copies the specified drag image to the
internal list. You can retrieve the handle to the temporary drag image list by
using the <MSHelp:link tabIndex=0 
xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_GetDragImage_cpp">
ImageList_GetDragImage</MSHelp:link>
 function. The function also retrieves the current drag position and the offset
of the drag image relative to the drag position.</p>
<h4><a name="Beginning_the_drag_o"></a>Beginning the drag operation</h4>
<p>The following function is intended to be called in response to a mouse
button-down message, such as <MSHelp:link tabIndex=0 
xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_wm_lbuttondown">
WM_LBUTTONDOWN</MSHelp:link>
. The function determines whether the user has clicked within the bounding
rectangle of the image. If the user has clicked, the function captures the mouse
input, erases the image from the client area, and calculates the position for
the hot spot within the image. The function sets the hot spot to coincide with
the hot spot of the mouse cursor. Then the function begins the drag operation by
calling <b>ImageList_BeginDrag</b>.</p>
<pre class="clsCode" style="DISPLAY: none" AUTOHILITE="1"><font color="blue">//</font><font color="green"> StartDragging - begins dragging a bitmap. </font>
<font color="blue">//</font><font color="green"> Returns TRUE if successful, or FALSE otherwise. </font>
<font color="blue">//</font><font color="green"> hwnd - handle to the window in which the bitmap is dragged. </font>
<font color="blue">//</font><font color="green"> ptCur - coordinates of the cursor. </font>
<font color="blue">//</font><font color="green"> himl - handle to the image list. </font>
<font color="blue">//</font><font color="green"> </font>
<font color="blue">//</font><font color="green"> Global variables </font>
<font color="blue">//</font><font color="green">     g_rcImage - bounding rectangle of the image to drag. </font>
<font color="blue">//</font><font color="green">     g_nImage - index of the image. </font>
<font color="blue">//</font><font color="green">     g_ptHotSpot - location of the image's hot spot. </font>
<font color="blue">//</font><font color="green">     g_cxBorder and g_cyBorder - width and height of border. </font>
<font color="blue">//</font><font color="green">     g_cyCaption and g_cyMenu - height of title bar and menu bar. </font>
extern RECT g_rcImage; 
extern int g_nImage; 
extern POINT g_ptHotSpot; 
 
BOOL StartDragging(HWND hwnd, POINT ptCur, HIMAGELIST himl) 
{ 
    <font color="blue">//</font><font color="green"> Return if the cursor is not in the bounding rectangle of </font>
    <font color="blue">//</font><font color="green"> the image. </font>
    if (!PtInRect(&amp;g_rcImage, ptCur)) 
        return FALSE; 
 
    <font color="blue">//</font><font color="green"> Capture the mouse input. </font>
    SetCapture(hwnd); 
 
    <font color="blue">//</font><font color="green"> Erase the image from the client area. </font>
    InvalidateRect(hwnd, &amp;g_rcImage, TRUE); 
    UpdateWindow(hwnd); 
 
    <font color="blue">//</font><font color="green"> Calculate the location of the hot spot, and save it. </font>
    g_ptHotSpot.x = ptCur.x - g_rcImage.left; 
    g_ptHotSpot.y = ptCur.y - g_rcImage.top; 
 
    <font color="blue">//</font><font color="green"> Begin the drag operation. </font>
    if (!ImageList_BeginDrag(himl, g_nImage, 
            g_ptHotSpot.x, g_ptHotSpot.y)) 
        return FALSE; 
 
    <font color="blue">//</font><font color="green"> Set the initial location of the image, and make it visible. </font>
    <font color="blue">//</font><font color="green"> Because the ImageList_DragEnter function expects coordinates to </font>
    <font color="blue">//</font><font color="green"> be relative to the upper-left corner of the given window, the </font>
    <font color="blue">//</font><font color="green"> width of the border, title bar, and menu bar need to be taken </font>
    <font color="blue">//</font><font color="green"> into account. </font>
    ImageList_DragEnter(hwnd, ptCur.x + g_cxBorder, 
        ptCur.y + g_cyBorder + g_cyCaption + g_cyMenu); 
 
    g_fDragging = TRUE; 
 
    return TRUE; 
} </pre>
<h4><a name="Moving_the_image"></a>Moving the image</h4>
<p>The following function, which drags the image to a new location, is intended
to be called in response to the <MSHelp:link tabIndex=0 
xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_wm_mousemove">
WM_MOUSEMOVE</MSHelp:link>
 message.</p>
<pre class="clsCode" AUTOHILITE="1"><font color="blue">//</font><font color="green"> MoveTheImage - drags an image to the specified coordinates. </font>
<font color="blue">//</font><font color="green"> Returns TRUE if successful, or FALSE otherwise. </font>
<font color="blue">//</font><font color="green"> ptCur - new coordinates for the image. </font>
BOOL MoveTheImage(POINT ptCur) 
{ 
    if (!ImageList_DragMove(ptCur.x, ptCur.y)) 
        return FALSE; 
 
    return TRUE; 
} </pre>
<h4><a name="Ending_the_drag_oper"></a>Ending the drag operation</h4>
<p>The following function ends the drag operation and draws the image in its
final location. It also releases the mouse capture.</p>
<pre class="clsCode" style="DISPLAY: none" AUTOHILITE="1"><font color="blue">//</font><font color="green"> StopDragging - ends a drag operation and draws the image </font>
<font color="blue">//</font><font color="green"> at its final location. </font>
<font color="blue">//</font><font color="green"> Returns TRUE if successful, or FALSE otherwise. </font>
<font color="blue">//</font><font color="green"> hwnd - handle to the window in which the bitmap is dragged. </font>
<font color="blue">//</font><font color="green"> himl - handle to the image list. </font>
<font color="blue">//</font><font color="green"> ptCur - coordinates of the cursor. </font>
<font color="blue">//</font><font color="green"> </font>
<font color="blue">//</font><font color="green"> Global variable </font>
<font color="blue">//</font><font color="green">     g_ptHotSpot - location of the image's hot spot. </font>
 
extern POINT g_ptHotSpot; 
 
BOOL StopDragging(HWND hwnd, HIMAGELIST himl, POINT ptCur) 
{ 
    ImageList_EndDrag(); 
    ImageList_DragLeave(hwnd) 
 
    g_fDragging = FALSE; 
 
    DrawTheImage(hwnd, himl, ptCur.x - g_ptHotSpot.x, 
        ptCur.y - g_ptHotSpot.y); 
 
    ReleaseCapture(); 
    return TRUE; 
} </pre>
<h3><a name="Image_Information"></a>Image Information</h3>
<p>There are a number of functions that retrieve information from an image list.
The <MSHelp:link tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_GetImageInfo_cpp">
ImageList_GetImageInfo</MSHelp:link>
 function fills an <MSHelp:link tabIndex=0 
xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_IMAGEINFO_cpp">
IMAGEINFO</MSHelp:link>
 structure with information about a single image, including the handles of the
image and mask bitmaps, the number of color planes and bits per pixel, and the
bounding rectangle of the image within the image bitmap. You can use this
information to directly manipulate the bitmaps for the image. The <MSHelp:link tabIndex=0 
xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_GetImageCount_cpp">
ImageList_GetImageCount</MSHelp:link>
 function retrieves the number of images in an image list.</p>
<h3><a name="Image_Overlays"></a>Image Overlays</h3>
<p>Every image list includes a list of indexes to use as overlays. An overlay is
an image that is drawn transparently over another image. Any image currently in
the image list can be used as an overlay. You can specify up to four overlays
per image list. This limit has been expanded to 15 in version 4.71.</p>
<p>You add the index of an image to the list of overlays by using the <MSHelp:link tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_SetOverlayImage_cpp">
ImageList_SetOverlayImage</MSHelp:link>
 function, specifying the handle to the image list, the index of the existing
image, and the desired overlay index. This, in effect, tells the image list that
&quot;the image at index <i>x</i> can be used as an overlay, and I want to refer
to the overlay as overlay index <i>y</i>.&quot; The overlay indexes are
one-based rather than zero-based because an overlay index of zero means that no
overlay will be used.</p>
<p>You specify an overlay when drawing an image with the <b>ImageList_Draw</b>
or <b>ImageList_DrawEx</b> function. The overlay is specified by performing a
logical OR operation between the desired drawing flags and the result of the <MSHelp:link tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_INDEXTOOVERLAYMASK_cpp">
INDEXTOOVERLAYMASK</MSHelp:link>
 macro. The <b>INDEXTOOVERLAYMASK</b> macro takes the overlay index and formats
it for inclusion with the flags for these functions. This will draw the image
with the specified overlay. The following example demonstrates how an overlay is
added and specified when drawing the image.</p>
<pre class="clsCode" AUTOHILITE="1">ImageList_SetOverlayImage(himl, 0, 3);
ImageList_Draw(himl, 1, hdc, 0, 0, ILD_MASK | INDEXTOOVERLAYMASK(3));</pre>
<p>This will draw image 1 and then overlay that image with image 0. Because 3 is
the overlay index that you specified in the <b>ImageList_SetOverlayImage</b>
call, 3 is placed in the <b>INDEXTOOVERLAYMASK</b> macro.</p>
<h3><a name="Image_List_Updates_i"></a>Image List Updates in Internet Explorer</h3>
<p>The following features were added to the image list by Microsoft Internet
Explorer.</p>
<table class="clsStd">
  <tbody>
    <tr>
      <td><b>Copying Images</b></td>
      <td>Copy or swap images within an image list using the <MSHelp:link tabIndex=0 
xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_Copy_cpp">
        ImageList_Copy</MSHelp:link>
        function. This function allows you to indicate whether the source image
        should be copied to the destination index or the source and destination
        images should be swapped. Currently, this is allowed only within a
        single image list.</td>
    </tr>
    <tr>
      <td><b>Duplicating Image Lists</b></td>
      <td>Take an existing image list and duplicate all of its parameters and
        contents into a new image list using the <MSHelp:link tabIndex=0 
xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_Duplicate_cpp">
        ImageList_Duplicate</MSHelp:link>
        function. The image list returned by this function is an exact duplicate
        of the original image list and must be destroyed separately. Changes
        made to one image list do not affect the other.</td>
    </tr>
    <tr>
      <td><b>Dynamic Resizing of Image Lists</b></td>
      <td>Modify the number of images in an image list on the fly using the <MSHelp:link tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_SetImageCount_cpp">
        ImageList_SetImageCount</MSHelp:link>
        function. If the number of images is increased, you must use the <b>ImageList_Replace</b>
        function to place images in the added slots. If the number of images is
        reduced, the images beyond the new size are freed and are no longer
        available.</td>
    </tr>
    <tr>
      <td><b>Extended Drawing of Images</b></td>
      <td>You now have more control over the drawing of images with the <MSHelp:link 
tabIndex=0 xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_ImageList_DrawIndirect_cpp">
        ImageList_DrawIndirect</MSHelp:link>
        function. This function takes an <MSHelp:link tabIndex=0 
xmlns:MSHelp="http://msdn.microsoft.com/mshelp" 
keywords="_win32_IMAGELISTDRAWPARAMS_cpp">
        IMAGELISTDRAWPARAMS</MSHelp:link>
        structure that specifies the details that will be used when drawing the
        image. With this function, you can now specify things like ROP codes
        when drawing.</td>
    </tr>
  </tbody>
</table>

</body>

</html>
