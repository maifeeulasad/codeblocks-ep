<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>The Dynamic Loader</title>
</head>

<body>

<h2><a name="_Toc509457102"><span style="mso-ansi-language:EN-US">The Dynamic
Loader</span></a><span style="mso-ansi-language:EN-US"><o:p>
</o:p>
</span></h2>
<p class="MsoHeader" style="tab-stops:36.0pt center 8.0cm right 16.0cm"><span style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US">This
utility allows you to load an object file from disk and link it to a running
executable. This facility consists of the following parts:<o:p>
</o:p>
</span></p>
<p class="MsoHeader" style="margin-left:18.0pt;text-indent:-18.0pt;mso-list:l3 level1 lfo9;
tab-stops:list 18.0pt center 8.0cm right 16.0cm"><span style="font-family:Symbol;mso-ansi-language:EN-US">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:
EN-US">The dynloader.dll file, which should be in your PATH variable<o:p>
</o:p>
</span></p>
<p class="MsoHeader" style="margin-left:18.0pt;text-indent:-18.0pt;mso-list:l3 level1 lfo9;
tab-stops:list 18.0pt center 8.0cm right 16.0cm"><span style="font-family:Symbol;mso-ansi-language:EN-US">·<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span></span><span style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:
EN-US">The bind utility<o:p>
</o:p>
</span><span style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US"><o:p>
</o:p>
</span></p>
<p class="MsoHeader" style="tab-stops:36.0pt center 8.0cm right 16.0cm"><span style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US">The
dynloader.dll exports three functions that are of interest here:<o:p>
</o:p>
<o:p>
</o:p>
</span></p>
<p class="MsoHeader" style="margin-left:18.0pt;text-indent:-18.0pt;mso-list:l4 level1 lfo11;
tab-stops:list 18.0pt center 8.0cm right 16.0cm"><span style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US">1.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>LoadObjectFile<o:p>
</o:p>
</span></p>
<p class="MsoHeader" style="margin-left:18.0pt;text-indent:-18.0pt;mso-list:l4 level1 lfo11;
tab-stops:list 18.0pt center 8.0cm right 16.0cm"><span style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US">2.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>GetProcedureAddress<o:p>
</o:p>
</span></p>
<p class="MsoHeader" style="margin-left:18.0pt;text-indent:-18.0pt;mso-list:l4 level1 lfo11;
tab-stops:list 18.0pt center 8.0cm right 16.0cm"><span style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US">3.<span style="font:7.0pt &quot;Times New Roman&quot;">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>UnloadObjectFile<o:p>
</o:p>
<o:p>
</o:p>
</span></p>
<p class="MsoHeader" style="tab-stops:36.0pt center 8.0cm right 16.0cm"><span style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US">The
interface is very similar to that of LoadLibrary, since the functionality is
quite similar.<o:p>
</o:p>
<o:p>
</o:p>
</span></p>
<p class="MsoHeader" style="tab-stops:36.0pt center 8.0cm right 16.0cm"><span style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US">The
dynamic loader operates by opening the given object, allocating space in RAM for
the data and the code stored in there, copying the contents of the data and code
sections, then fixing up everything.<o:p>
</o:p>
<o:p>
</o:p>
</span></p>
<p class="MsoHeader" style="tab-stops:36.0pt center 8.0cm right 16.0cm"><span style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US">To
resolve external references, the loader relies first on the symbol table of the
running executable. If that symbol table exists, it will be used to resolve
external references from the object file.<o:p>
</o:p>
<o:p>
</o:p>
</span></p>
<p class="MsoHeader" style="tab-stops:36.0pt center 8.0cm right 16.0cm"><span style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US">If
the symbol table is absent in the running executable, or a symbol is found that
does not match any executable symbols, the dynamic loader will rely on the
imports table generated by the bind utility. This table contains the DLLs used
by the object file, and all the imported functions that are needed.<o:p>
</o:p>
<o:p>
</o:p>
</span></p>
<p class="MsoHeader" style="tab-stops:36.0pt center 8.0cm right 16.0cm"><span style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US">The
bind utility will construct this table from the “apilist.txt” file, which is
present in the lcc-win32 distribution in the “lib” directory. This file
contains a list of all known DLLs and their exported functions. Using this list,
the bind utility appends a list of needed DLLs to the object file, that will be
used by the dynloader.dll library.<o:p>
</o:p>
<o:p>
</o:p>
</span></p>
<p class="MsoHeader" style="tab-stops:36.0pt center 8.0cm right 16.0cm"><span style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US">Note
that if you wish to add a DLL of your own to the list, you can do so by
modifying apilist.txt.<o:p>
</o:p>
</span></p>
<h4><span lang="FR">Binding an object file</span></h4>
<p class="MsoHeader" style="tab-stops:36.0pt center 8.0cm right 16.0cm"><span style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US">Before
loading an object file it must be &quot;bound&quot; using the &quot;bind.exe&quot;
utility. The syntax of the &quot;bind&quot; command is very simple:<o:p>
</o:p>
</span></p>
<p class="MsoHeader" style="tab-stops:36.0pt center 8.0cm right 16.0cm"><span style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US"><span style="mso-tab-count:1">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><b>bind</b> &lt;object file&gt;<o:p>
</o:p>
</span></p>
<p class="MsoHeader" style="tab-stops:36.0pt center 8.0cm right 16.0cm"><span style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US">This
will build a list of the DLLs needed by the object file so that it can be
quickly loaded later.<o:p>
</o:p>
</span><span style="font-family:&quot;Times New Roman&quot;;mso-ansi-language:EN-US"><o:p>
</o:p>
</span></p>
<h4><span style="mso-ansi-language:EN-US">Loading an Object File<o:p>
</o:p>
</span></h4>
<p class="MsoNormalIndent" style="margin-left:0cm;text-indent:0cm"><span style="mso-ansi-language:EN-US">An
object file is loaded using the LoadObjectFile function. The result can be
either NULL, meaning the object file could not be found, or a pointer to an
OBJECT_FILE structure, containing information about the loaded object. Please
note that the members of the structure will probably change in future releases,
so it is not a very good idea to use them in your code. You can still look at
them and they are provided for debugging purposes.<o:p>
</o:p>
</span></p>
<h4><span style="mso-ansi-language:EN-US">Getting a Function Pointer<o:p>
</o:p>
</span></h4>
<p class="MsoNormalIndent" style="margin-top:6.0pt;margin-right:-.35pt;
margin-bottom:0cm;margin-left:0cm;margin-bottom:.0001pt;text-indent:0cm"><span style="mso-ansi-language:EN-US">This
is accomplished with the GetProcedureAddress function. The pointer returned
(that can be NULL if the name is not found) should be cast to match the function
prototype. Note that the name of the procedure to be found should match the name
as exported from the object file, i.e., you should add the leading underscore
and the _stdcall decoration if any. For instance for the function<o:p>
</o:p>
</span></p>
<p class="MsoNormalIndent" style="margin-left:0cm;text-indent:0cm"><span style="font-family:Courier;mso-ansi-language:EN-US">void
hello(void)<o:p>
</o:p>
</span></p>
<p class="MsoNormalIndent" style="margin-left:0cm;text-indent:0cm"><span style="mso-ansi-language:EN-US">you
should pass _hello to the loader. For a _stdcall function, you should add
‘@’ and the size of the function stack.<o:p>
</o:p>
</span></p>
<h4><span style="mso-ansi-language:EN-US">Unloading the Object File<o:p>
</o:p>
</span></h4>
<p class="MsoNormalIndent" style="margin-left:0cm;text-indent:0cm"><span style="mso-ansi-language:EN-US">This
is accomplished using the UnloadObjectFile function. All memory used by the
object file and its descriptors is reclaimed. You should ensure that no further
uses of the object file occur.<o:p>
</o:p>
</span></p>
<p class="MsoNormalIndent" style="margin-left:0cm;text-indent:0cm"><span style="mso-ansi-language:EN-US">&nbsp;<o:p>
</o:p>
</span></p>
<h4><span style="mso-ansi-language:EN-US">A Complete Example<o:p>
</o:p>
</span></h4>
<p class="MsoNormalIndent" style="margin-left:0cm;text-indent:0cm"><span style="font-family:Courier;mso-ansi-language:EN-US">#include
&lt;dynloader.h&gt;<o:p>
</o:p>
</span></p>
<p class="MsoNormalIndent" style="margin-left:0cm;text-indent:0cm"><span lang="FR" style="font-family:Courier">int
main(void)<o:p>
</o:p>
</span></p>
<p class="MsoNormalIndent" style="margin-left:0cm;text-indent:0cm"><span style="font-family:Courier;mso-ansi-language:EN-US">{<o:p>
</o:p>
</span></p>
<p class="MsoNormalIndent" style="margin-left:0cm;text-indent:0cm"><span style="font-family:Courier;mso-ansi-language:EN-US"><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>OBJECT_FILE *obj =
LoadObjectFile(&quot;hello.obj&quot;);<o:p>
</o:p>
</span></p>
<p class="MsoNormalIndent" style="margin-left:0cm;text-indent:0cm"><span style="mso-spacerun: yes; font-family: Courier; mso-ansi-language: EN-US">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span lang="FR" style="font-family:Courier">void (*fn)(void);<o:p>
</o:p>
</span></p>
<p class="MsoNormalIndent" style="margin-left:0cm;text-indent:0cm"><span lang="FR" style="font-family:Courier">&nbsp;<o:p>
</o:p>
</span></p>
<p class="MsoNormalIndent" style="margin-left:0cm;text-indent:0cm"><span style="mso-spacerun: yes; font-family: Courier" lang="FR">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span><span style="font-family:Courier;mso-ansi-language:EN-US">fn =
GetProcedureAddress(obj,&quot;_hello&quot;);<o:p>
</o:p>
</span></p>
<p class="MsoNormalIndent" style="margin-left:0cm;text-indent:0cm"><span style="font-family:Courier;mso-ansi-language:EN-US"><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>(*fn)();<o:p>
</o:p>
</span></p>
<p class="MsoNormalIndent" style="margin-left:0cm;text-indent:0cm"><span style="font-family:Courier;mso-ansi-language:EN-US"><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>UnloadObjectFile(obj);<o:p>
</o:p>
</span></p>
<p class="MsoNormalIndent" style="margin-left:0cm;text-indent:0cm"><span style="font-family:Courier;mso-ansi-language:EN-US"><span style="mso-spacerun:
yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>return 0;<o:p>
</o:p>
</span></p>
<p class="MsoNormalIndent" style="margin-left:0cm;text-indent:0cm"><span style="font-family:Courier;mso-ansi-language:EN-US">}<o:p>
</o:p>
</span></p>

</body>

</html>
