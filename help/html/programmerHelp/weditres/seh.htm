<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<meta name="GENERATOR" content="Microsoft FrontPage 4.0">
<meta name="ProgId" content="FrontPage.Editor.Document">
<title>Structured exception handling Exceptions can be initiated by hardware or
software</title>
</head>

<body>

<p><font face="Arial"><b>Structured exception handling</b></font><br>
<font face="Arial">Exceptions can be initiated by hardware or software, and can
occur anywhere in your code. Structured exception handling provides a single
mechanism for the handling of exceptions.<br>
The execution of certain instruction sequences can result in exceptions that are
initiated by hardware. For example, an access violation is generated by the
hardware when a process attempts to read from or write to a virtual address to
which it does not have the appropriate access.<br>
Conceptually we set up a protected code block enclosed in a</font> <font face="Tahoma">__try
{ }</font> <font face="Tahoma">__except() { } </font><font face="Arial">expression.
If execution of the code in the protected block provokes an exception, the
filter expression in the</font> <font face="Tahoma">__except() </font><font face="Arial">expression
will be executed. This code should return one of the following values:</font></p>
<table border="1" width="100%">
  <tr>
    <td width="30%">EXCEPTION_EXECUTE_HANDLER </td>
    <td width="70%"><font face="Arial">The system transfers control to the
      exception handler, and execution continues in the stack frame in which the
      handler is found.</font></td>
  </tr>
  <tr>
    <td width="30%">EXCEPTION_CONTINUE_SEARCH</td>
    <td width="70%"><font face="Arial">The system continues to search for a
      handler.</font></td>
  </tr>
  <tr>
    <td width="30%">EXCEPTION_CONTINUE_EXECUTION</td>
    <td width="70%"><font face="Arial">The system stops its search for a handler
      and returns control to the point at which the exception occurred. If the
      exception is noncontinuable, this results in an
      EXCEPTION_NONCONTINUABLE-_EXCEPTION error.</font></td>
  </tr>
</table>
<p><font face="Arial">All this values, and the other definitions mentioned in
this manual are in the standard header file &lt;seh.h&gt;. Include this file in
any code that uses structured exception handling.</font></p>
<p><font face="Arial">Within the context of the filter expression you can use
several functions that can help you get more information about what happened.<br>
The function</font><br>
<font face="Courier New">&nbsp;&nbsp; </font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font face="Courier New">unsigned int GetExceptionCode(void);</font><br>
<font face="Arial">returns the code for the current exception. The function</font><br>
<font face="Courier New">&nbsp;&nbsp; </font>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
<font face="Courier New">EXCEPTION_POINTERS *GetExceptionInformation(void);</font><br>
<font face="Arial">will return a pointer to a global EXCEPTION_POINTERS
structure. That structure contains a pointer to an exception record where a
wealth of information is available to know what happened.</font></p>
<p><font face="Arial">This structure is defined as follows:</font></p>
<p><font face="Courier New">typedef struct _EXCEPTION_POINTERS {<br>
&nbsp;&nbsp;&nbsp; PEXCEPTION_RECORD ExceptionRecord;<br>
&nbsp;&nbsp;&nbsp; PCONTEXT ContextRecord;<br>
} EXCEPTION_POINTERS, *PEXCEPTION_POINTERS;<br>
</font></p>
<p><font face="Arial">This structure contains just two pointers, one to an
exception record, and the other to a CONTEXT record with the state of the
machine at the point of the exception. The run time of lcc-win32 arranges for
securing this information in a static area at each exception. Note that this
information is meaningful if (and only if) an exception is active. At the next
exception the static area will be overwritten with new information from the new
exception. If you want to preserve the data you should copy it somewhere else.</font></p>
<p><font face="Arial">In the EXCEPTION_RECORD structure we find:</font></p>
<pre class="syntax" xml:space="preserve">typedef struct _EXCEPTION_RECORD {
  DWORD <a class="synParam" onclick="showTip(this)" href="#ExceptionCode:">ExceptionCode</a>;
  DWORD ExceptionFlags; // <font face="Arial">Can be either zero (continuable exception), or EXCEPTION_NONCONTINUABLE.
</font>  struct _EXCEPTION_RECORD* ExceptionRecord;
  PVOID ExceptionAddress; // <font face="Arial">Machine address of instruction that faulted</font>
  DWORD NumberParameters; // <font face="Arial">This two parameters are used by the</font> RaiseException()<font face="Arial"> function.</font>
  ULONG_PTR ExceptionInformation[EXCEPTION_MAXIMUM_PARAMETERS];
} EXCEPTION_RECORD, *PEXCEPTION_RECORD;</pre>
<p><a name="ExceptionCode:">ExceptionCode:</a></p>
<table border="1" width="100%">
  <tr>
    <td width="25%">Code</td>
    <td width="75%">Meaning</td>
  </tr>
  <tr>
    <td width="25%"><font face="Courier New" size="2">EXCEPTION_ACCESS_VIOLATION</font></td>
    <td width="75%">The thread tried to read from or write to a virtual address
      for which it does not have the appropriate access. </td>
  </tr>
  <tr>
    <td width="25%"><font face="Courier New" size="2">EXCEPTION_ARRAY_BOUNDS_EXCEEDED</font></td>
    <td width="75%">The thread tried to access an array element that is out of
      bounds and the underlying hardware supports bounds checking.</td>
  </tr>
  <tr>
    <td width="25%"><font face="Courier New" size="2">EXCEPTION_BREAKPOINT</font></td>
    <td width="75%">A breakpoint was encountered. </td>
  </tr>
  <tr>
    <td width="25%"><font face="Courier New" size="2">EXCEPTION_DATATYPE_MISALIGNMENT</font></td>
    <td width="75%">The thread tried to read or write data that is misaligned on
      hardware that does not provide alignment. For example, 16-bit values must
      be aligned on 2-byte boundaries; 32-bit values on 4-byte boundaries, and
      so on. </td>
  </tr>
  <tr>
    <td width="25%"><font face="Courier New" size="2">EXCEPTION_FLT_DENORMAL_OPERAND</font></td>
    <td width="75%">One of the operands in a floating-point operation is
      denormal. A denormal value is one that is too small to represent as a
      standard floating-point value. </td>
  </tr>
  <tr>
    <td width="25%"><font face="Courier New" size="2">EXCEPTION_FLT_DIVIDE_BY_ZERO</font></td>
    <td width="75%">The thread tried to divide a floating-point value by a
      floating-point divisor of zero. </td>
  </tr>
  <tr>
    <td width="25%"><font face="Courier New" size="2">EXCEPTION_FLT_INEXACT_RESULT</font></td>
    <td width="75%">The result of a floating-point operation cannot be
      represented exactly as a decimal fraction. </td>
  </tr>
  <tr>
    <td width="25%"><font face="Courier New" size="2">EXCEPTION_FLT_INVALID_OPERATION</font></td>
    <td width="75%">This exception represents any floating-point exception not
      included in this list. </td>
  </tr>
  <tr>
    <td width="25%"><font face="Courier New" size="2">EXCEPTION_FLT_OVERFLOW</font></td>
    <td width="75%">The exponent of a floating-point operation is greater than
      the magnitude allowed by the corresponding type. </td>
  </tr>
  <tr>
    <td width="25%"><font face="Courier New" size="2">EXCEPTION_FLT_STACK_CHECK</font></td>
    <td width="75%">The stack overflowed or underflowed as the result of a
      floating-point operation. </td>
  </tr>
  <tr>
    <td width="25%"><font face="Courier New" size="2">EXCEPTION_FLT_UNDERFLOW</font></td>
    <td width="75%">The exponent of a floating-point operation is less than the
      magnitude allowed by the corresponding type. </td>
  </tr>
  <tr>
    <td width="25%"><font face="Courier New" size="2">EXCEPTION_ILLEGAL_INSTRUCTION</font></td>
    <td width="75%">The thread tried to execute an invalid instruction. This
      happens when a jmp to a data location was executed, or the return stack of
      a function was corrupted.</td>
  </tr>
  <tr>
    <td width="25%"><font face="Courier New" size="2">EXCEPTION_IN_PAGE_ERROR</font></td>
    <td width="75%">The thread tried to access a page that was not present, and
      the system was unable to load the page. For example, this exception might
      occur if a network connection is lost while running a program over the
      network. </td>
  </tr>
  <tr>
    <td width="25%"><font face="Courier New" size="2">EXCEPTION_INT_DIVIDE_BY_ZERO</font></td>
    <td width="75%">The thread tried to divide an integer value by an integer
      divisor of zero. </td>
  </tr>
  <tr>
    <td width="25%"><font face="Courier New" size="2">EXCEPTION_INT_OVERFLOW</font></td>
    <td width="75%">The result of an integer operation caused a carry out of the
      most significant bit of the result. This never happens under the default
      run time but it could be implemented later in future versions of lcc-win32</td>
  </tr>
  <tr>
    <td width="25%"><font face="Courier New" size="2">EXCEPTION_INVALID_DISPOSITION
      </font></td>
    <td width="75%">An exception handler returned an invalid disposition to the
      exception dispatcher. Programmers using a high-level language such as C
      should never encounter this exception. </td>
  </tr>
  <tr>
    <td width="25%"><font face="Courier New" size="2">EXCEPTION_NONCONTINUABLE_EXCEPTION
      </font></td>
    <td width="75%">The thread tried to continue execution after a
      noncontinuable exception occurred. </td>
  </tr>
  <tr>
    <td width="25%"><font face="Courier New" size="2">EXCEPTION_PRIV_INSTRUCTION</font></td>
    <td width="75%">The thread tried to execute an instruction whose operation
      is not allowed in the current machine mode. This can be a consequence of
      stack corruption or jump to an invalid location. Lcc-win32 never uses
      privileged instructions in the compiled program.</td>
  </tr>
  <tr>
    <td width="25%"><font face="Courier New" size="2">EXCEPTION_SINGLE_STEP</font></td>
    <td width="75%">A trace trap or other single-instruction mechanism signaled
      that one instruction has been executed. </td>
  </tr>
  <tr>
    <td width="25%"><font face="Courier New" size="2">EXCEPTION_STACK_OVERFLOW</font></td>
    <td width="75%">The thread used up its stack.</td>
  </tr>
</table>
<pre><font face="Arial" size="3"><b> Example:</b></font></pre>
<pre>
#include &lt;seh.h&gt;</pre>
<pre>#include &lt;stdio.h&gt;</pre>
<pre>int main(void) {</pre>
<pre>	char *p = NULL;</pre>
<pre>	int code;</pre>
<pre> 	__try {</pre>
<pre>		*p = 0;</pre>
<pre>	}</pre>
<pre>	__except(code = GetExceptionCode(),EXCEPTION_EXECUTE_HANDLER) {</pre>
<pre>		printf(&quot;Caught exception %#x\n&quot;,code);</pre>
<pre>	}
  }</pre>
<pre><font face="Arial" size="3">This will produce</font></pre>
<pre><font face="Courier New" size="2">Caught exception 0xC0000005</font></pre>
<pre>&nbsp;</pre>
<p>&nbsp;</p>
<p>&nbsp;</p>

</body>

</html>
